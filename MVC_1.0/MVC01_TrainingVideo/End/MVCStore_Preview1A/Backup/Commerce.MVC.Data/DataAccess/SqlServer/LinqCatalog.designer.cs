#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Commerce.Data.SqlRepository
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="CommerceDB")]
	public partial class DB : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCategories_Product(Categories_Product instance);
    partial void UpdateCategories_Product(Categories_Product instance);
    partial void DeleteCategories_Product(Categories_Product instance);
    partial void InsertCategoryCultureDetail(CategoryCultureDetail instance);
    partial void UpdateCategoryCultureDetail(CategoryCultureDetail instance);
    partial void DeleteCategoryCultureDetail(CategoryCultureDetail instance);
    partial void InsertCulture(Culture instance);
    partial void UpdateCulture(Culture instance);
    partial void DeleteCulture(Culture instance);
    partial void InsertProductCultureDetail(ProductCultureDetail instance);
    partial void UpdateProductCultureDetail(ProductCultureDetail instance);
    partial void DeleteProductCultureDetail(ProductCultureDetail instance);
    partial void InsertProductReview(ProductReview instance);
    partial void UpdateProductReview(ProductReview instance);
    partial void DeleteProductReview(ProductReview instance);
    partial void InsertProductImage(ProductImage instance);
    partial void UpdateProductImage(ProductImage instance);
    partial void DeleteProductImage(ProductImage instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertProducts_Related(Products_Related instance);
    partial void UpdateProducts_Related(Products_Related instance);
    partial void DeleteProducts_Related(Products_Related instance);
    partial void InsertProducts_CrossSell(Products_CrossSell instance);
    partial void UpdateProducts_CrossSell(Products_CrossSell instance);
    partial void DeleteProducts_CrossSell(Products_CrossSell instance);
    partial void InsertOrderStatus(OrderStatus instance);
    partial void UpdateOrderStatus(OrderStatus instance);
    partial void DeleteOrderStatus(OrderStatus instance);
    partial void InsertDeliveryMethod(DeliveryMethod instance);
    partial void UpdateDeliveryMethod(DeliveryMethod instance);
    partial void DeleteDeliveryMethod(DeliveryMethod instance);
    partial void InsertTransactionProcessor(TransactionProcessor instance);
    partial void UpdateTransactionProcessor(TransactionProcessor instance);
    partial void DeleteTransactionProcessor(TransactionProcessor instance);
    partial void InsertTransactions(Transactions instance);
    partial void UpdateTransactions(Transactions instance);
    partial void DeleteTransactions(Transactions instance);
    partial void InsertTaxRate(TaxRate instance);
    partial void UpdateTaxRate(TaxRate instance);
    partial void DeleteTaxRate(TaxRate instance);
    partial void InsertInventoryStatus(InventoryStatus instance);
    partial void UpdateInventoryStatus(InventoryStatus instance);
    partial void DeleteInventoryStatus(InventoryStatus instance);
    partial void InsertInventoryRecord(InventoryRecord instance);
    partial void UpdateInventoryRecord(InventoryRecord instance);
    partial void DeleteInventoryRecord(InventoryRecord instance);
    partial void InsertMailerTemplateType(MailerTemplateType instance);
    partial void UpdateMailerTemplateType(MailerTemplateType instance);
    partial void DeleteMailerTemplateType(MailerTemplateType instance);
    partial void InsertMailerTemplate(MailerTemplate instance);
    partial void UpdateMailerTemplate(MailerTemplate instance);
    partial void DeleteMailerTemplate(MailerTemplate instance);
    partial void InsertAddress(Address instance);
    partial void UpdateAddress(Address instance);
    partial void DeleteAddress(Address instance);
    partial void InsertUseBehavior(UseBehavior instance);
    partial void UpdateUseBehavior(UseBehavior instance);
    partial void DeleteUseBehavior(UseBehavior instance);
    partial void InsertUserEvent(UserEvent instance);
    partial void UpdateUserEvent(UserEvent instance);
    partial void DeleteUserEvent(UserEvent instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertShippingMethod(ShippingMethod instance);
    partial void UpdateShippingMethod(ShippingMethod instance);
    partial void DeleteShippingMethod(ShippingMethod instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertProductDescriptor(ProductDescriptor instance);
    partial void UpdateProductDescriptor(ProductDescriptor instance);
    partial void DeleteProductDescriptor(ProductDescriptor instance);
    partial void InsertOrder(Order instance);
    partial void UpdateOrder(Order instance);
    partial void DeleteOrder(Order instance);
    partial void InsertCouponType(CouponType instance);
    partial void UpdateCouponType(CouponType instance);
    partial void DeleteCouponType(CouponType instance);
    partial void InsertOrders_Coupon(Orders_Coupon instance);
    partial void UpdateOrders_Coupon(Orders_Coupon instance);
    partial void DeleteOrders_Coupon(Orders_Coupon instance);
    partial void InsertCoupon(Coupon instance);
    partial void UpdateCoupon(Coupon instance);
    partial void DeleteCoupon(Coupon instance);
    partial void InsertOrderItem(OrderItem instance);
    partial void UpdateOrderItem(OrderItem instance);
    partial void DeleteOrderItem(OrderItem instance);
    #endregion
		
		public DB() : 
				base(global::Commerce.Data.Properties.Settings.Default.Commerce_MVCConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DB(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DB(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DB(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DB(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Categories_Product> Categories_Products
		{
			get
			{
				return this.GetTable<Categories_Product>();
			}
		}
		
		public System.Data.Linq.Table<CategoryCultureDetail> CategoryCultureDetails
		{
			get
			{
				return this.GetTable<CategoryCultureDetail>();
			}
		}
		
		public System.Data.Linq.Table<Culture> Cultures
		{
			get
			{
				return this.GetTable<Culture>();
			}
		}
		
		public System.Data.Linq.Table<ProductCultureDetail> ProductCultureDetails
		{
			get
			{
				return this.GetTable<ProductCultureDetail>();
			}
		}
		
		public System.Data.Linq.Table<ProductReview> ProductReviews
		{
			get
			{
				return this.GetTable<ProductReview>();
			}
		}
		
		public System.Data.Linq.Table<ProductImage> ProductImages
		{
			get
			{
				return this.GetTable<ProductImage>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<Products_Related> Products_Relateds
		{
			get
			{
				return this.GetTable<Products_Related>();
			}
		}
		
		public System.Data.Linq.Table<Products_CrossSell> Products_CrossSells
		{
			get
			{
				return this.GetTable<Products_CrossSell>();
			}
		}
		
		public System.Data.Linq.Table<OrderStatus> OrderStatus
		{
			get
			{
				return this.GetTable<OrderStatus>();
			}
		}
		
		public System.Data.Linq.Table<DeliveryMethod> DeliveryMethods
		{
			get
			{
				return this.GetTable<DeliveryMethod>();
			}
		}
		
		public System.Data.Linq.Table<TransactionProcessor> TransactionProcessors
		{
			get
			{
				return this.GetTable<TransactionProcessor>();
			}
		}
		
		public System.Data.Linq.Table<Transactions> Transactions
		{
			get
			{
				return this.GetTable<Transactions>();
			}
		}
		
		public System.Data.Linq.Table<TaxRate> TaxRates
		{
			get
			{
				return this.GetTable<TaxRate>();
			}
		}
		
		public System.Data.Linq.Table<InventoryStatus> InventoryStatus
		{
			get
			{
				return this.GetTable<InventoryStatus>();
			}
		}
		
		public System.Data.Linq.Table<InventoryRecord> InventoryRecords
		{
			get
			{
				return this.GetTable<InventoryRecord>();
			}
		}
		
		public System.Data.Linq.Table<MailerTemplateType> MailerTemplateTypes
		{
			get
			{
				return this.GetTable<MailerTemplateType>();
			}
		}
		
		public System.Data.Linq.Table<MailerTemplate> MailerTemplates
		{
			get
			{
				return this.GetTable<MailerTemplate>();
			}
		}
		
		public System.Data.Linq.Table<Address> Addresses
		{
			get
			{
				return this.GetTable<Address>();
			}
		}
		
		public System.Data.Linq.Table<UseBehavior> UseBehaviors
		{
			get
			{
				return this.GetTable<UseBehavior>();
			}
		}
		
		public System.Data.Linq.Table<UserEvent> UserEvents
		{
			get
			{
				return this.GetTable<UserEvent>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<ShippingMethod> ShippingMethods
		{
			get
			{
				return this.GetTable<ShippingMethod>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<ProductDescriptor> ProductDescriptors
		{
			get
			{
				return this.GetTable<ProductDescriptor>();
			}
		}
		
		public System.Data.Linq.Table<Order> Orders
		{
			get
			{
				return this.GetTable<Order>();
			}
		}
		
		public System.Data.Linq.Table<CouponType> CouponTypes
		{
			get
			{
				return this.GetTable<CouponType>();
			}
		}
		
		public System.Data.Linq.Table<Orders_Coupon> Orders_Coupons
		{
			get
			{
				return this.GetTable<Orders_Coupon>();
			}
		}
		
		public System.Data.Linq.Table<Coupon> Coupons
		{
			get
			{
				return this.GetTable<Coupon>();
			}
		}
		
		public System.Data.Linq.Table<OrderItem> OrderItems
		{
			get
			{
				return this.GetTable<OrderItem>();
			}
		}
	}
	
	[Table(Name="dbo.Categories_Products")]
	public partial class Categories_Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryID;
		
		private int _ProductID;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    #endregion
		
		public Categories_Product()
		{
			this._Category = default(EntityRef<Category>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[Column(Storage="_CategoryID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[Column(Storage="_ProductID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[Association(Name="Category_Categories_Product", Storage="_Category", ThisKey="CategoryID", OtherKey="CategoryID", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Categories_Products.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Categories_Products.Add(this);
						this._CategoryID = value.CategoryID;
					}
					else
					{
						this._CategoryID = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[Association(Name="Product_Categories_Product", Storage="_Product", ThisKey="ProductID", OtherKey="ProductID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Categories_Products.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Categories_Products.Add(this);
						this._ProductID = value.ProductID;
					}
					else
					{
						this._ProductID = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.CategoryCultureDetail")]
	public partial class CategoryCultureDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryID;
		
		private int _CultureID;
		
		private string _CategoryName;
		
		private EntityRef<Culture> _Culture;
		
		private EntityRef<Category> _Category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnCultureIDChanging(int value);
    partial void OnCultureIDChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    #endregion
		
		public CategoryCultureDetail()
		{
			this._Culture = default(EntityRef<Culture>);
			this._Category = default(EntityRef<Category>);
			OnCreated();
		}
		
		[Column(Storage="_CategoryID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[Column(Storage="_CultureID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CultureID
		{
			get
			{
				return this._CultureID;
			}
			set
			{
				if ((this._CultureID != value))
				{
					if (this._Culture.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCultureIDChanging(value);
					this.SendPropertyChanging();
					this._CultureID = value;
					this.SendPropertyChanged("CultureID");
					this.OnCultureIDChanged();
				}
			}
		}
		
		[Column(Storage="_CategoryName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[Association(Name="Culture_CategoryCultureDetail", Storage="_Culture", ThisKey="CultureID", OtherKey="CultureID", IsForeignKey=true)]
		public Culture Culture
		{
			get
			{
				return this._Culture.Entity;
			}
			set
			{
				Culture previousValue = this._Culture.Entity;
				if (((previousValue != value) 
							|| (this._Culture.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Culture.Entity = null;
						previousValue.CategoryCultureDetails.Remove(this);
					}
					this._Culture.Entity = value;
					if ((value != null))
					{
						value.CategoryCultureDetails.Add(this);
						this._CultureID = value.CultureID;
					}
					else
					{
						this._CultureID = default(int);
					}
					this.SendPropertyChanged("Culture");
				}
			}
		}
		
		[Association(Name="Category_CategoryCultureDetail", Storage="_Category", ThisKey="CategoryID", OtherKey="CategoryID", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.CategoryCultureDetails.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.CategoryCultureDetails.Add(this);
						this._CategoryID = value.CategoryID;
					}
					else
					{
						this._CategoryID = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Cultures")]
	public partial class Culture : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CultureID;
		
		private string _LanguageCode;
		
		private string _Locale;
		
		private string _DefaultCurrencyCode;
		
		private EntitySet<CategoryCultureDetail> _CategoryCultureDetails;
		
		private EntitySet<ProductCultureDetail> _ProductCultureDetails;
		
		private EntitySet<ProductReview> _ProductReviews;
		
		private EntitySet<MailerTemplate> _MailerTemplates;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCultureIDChanging(int value);
    partial void OnCultureIDChanged();
    partial void OnLanguageCodeChanging(string value);
    partial void OnLanguageCodeChanged();
    partial void OnLocaleChanging(string value);
    partial void OnLocaleChanged();
    partial void OnDefaultCurrencyCodeChanging(string value);
    partial void OnDefaultCurrencyCodeChanged();
    #endregion
		
		public Culture()
		{
			this._CategoryCultureDetails = new EntitySet<CategoryCultureDetail>(new Action<CategoryCultureDetail>(this.attach_CategoryCultureDetails), new Action<CategoryCultureDetail>(this.detach_CategoryCultureDetails));
			this._ProductCultureDetails = new EntitySet<ProductCultureDetail>(new Action<ProductCultureDetail>(this.attach_ProductCultureDetails), new Action<ProductCultureDetail>(this.detach_ProductCultureDetails));
			this._ProductReviews = new EntitySet<ProductReview>(new Action<ProductReview>(this.attach_ProductReviews), new Action<ProductReview>(this.detach_ProductReviews));
			this._MailerTemplates = new EntitySet<MailerTemplate>(new Action<MailerTemplate>(this.attach_MailerTemplates), new Action<MailerTemplate>(this.detach_MailerTemplates));
			OnCreated();
		}
		
		[Column(Storage="_CultureID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CultureID
		{
			get
			{
				return this._CultureID;
			}
			set
			{
				if ((this._CultureID != value))
				{
					this.OnCultureIDChanging(value);
					this.SendPropertyChanging();
					this._CultureID = value;
					this.SendPropertyChanged("CultureID");
					this.OnCultureIDChanged();
				}
			}
		}
		
		[Column(Storage="_LanguageCode", DbType="Char(2) NOT NULL", CanBeNull=false)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					this.OnLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._LanguageCode = value;
					this.SendPropertyChanged("LanguageCode");
					this.OnLanguageCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Locale", DbType="Char(5)")]
		public string Locale
		{
			get
			{
				return this._Locale;
			}
			set
			{
				if ((this._Locale != value))
				{
					this.OnLocaleChanging(value);
					this.SendPropertyChanging();
					this._Locale = value;
					this.SendPropertyChanged("Locale");
					this.OnLocaleChanged();
				}
			}
		}
		
		[Column(Storage="_DefaultCurrencyCode", DbType="Char(3)")]
		public string DefaultCurrencyCode
		{
			get
			{
				return this._DefaultCurrencyCode;
			}
			set
			{
				if ((this._DefaultCurrencyCode != value))
				{
					this.OnDefaultCurrencyCodeChanging(value);
					this.SendPropertyChanging();
					this._DefaultCurrencyCode = value;
					this.SendPropertyChanged("DefaultCurrencyCode");
					this.OnDefaultCurrencyCodeChanged();
				}
			}
		}
		
		[Association(Name="Culture_CategoryCultureDetail", Storage="_CategoryCultureDetails", ThisKey="CultureID", OtherKey="CultureID")]
		public EntitySet<CategoryCultureDetail> CategoryCultureDetails
		{
			get
			{
				return this._CategoryCultureDetails;
			}
			set
			{
				this._CategoryCultureDetails.Assign(value);
			}
		}
		
		[Association(Name="Culture_ProductCultureDetail", Storage="_ProductCultureDetails", ThisKey="CultureID", OtherKey="CultureID")]
		public EntitySet<ProductCultureDetail> ProductCultureDetails
		{
			get
			{
				return this._ProductCultureDetails;
			}
			set
			{
				this._ProductCultureDetails.Assign(value);
			}
		}
		
		[Association(Name="Culture_ProductReview", Storage="_ProductReviews", ThisKey="CultureID", OtherKey="CultureID")]
		public EntitySet<ProductReview> ProductReviews
		{
			get
			{
				return this._ProductReviews;
			}
			set
			{
				this._ProductReviews.Assign(value);
			}
		}
		
		[Association(Name="Culture_MailerTemplate", Storage="_MailerTemplates", ThisKey="CultureID", OtherKey="CultureID")]
		public EntitySet<MailerTemplate> MailerTemplates
		{
			get
			{
				return this._MailerTemplates;
			}
			set
			{
				this._MailerTemplates.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CategoryCultureDetails(CategoryCultureDetail entity)
		{
			this.SendPropertyChanging();
			entity.Culture = this;
		}
		
		private void detach_CategoryCultureDetails(CategoryCultureDetail entity)
		{
			this.SendPropertyChanging();
			entity.Culture = null;
		}
		
		private void attach_ProductCultureDetails(ProductCultureDetail entity)
		{
			this.SendPropertyChanging();
			entity.Culture = this;
		}
		
		private void detach_ProductCultureDetails(ProductCultureDetail entity)
		{
			this.SendPropertyChanging();
			entity.Culture = null;
		}
		
		private void attach_ProductReviews(ProductReview entity)
		{
			this.SendPropertyChanging();
			entity.Culture = this;
		}
		
		private void detach_ProductReviews(ProductReview entity)
		{
			this.SendPropertyChanging();
			entity.Culture = null;
		}
		
		private void attach_MailerTemplates(MailerTemplate entity)
		{
			this.SendPropertyChanging();
			entity.Culture = this;
		}
		
		private void detach_MailerTemplates(MailerTemplate entity)
		{
			this.SendPropertyChanging();
			entity.Culture = null;
		}
	}
	
	[Table(Name="dbo.ProductCultureDetail")]
	public partial class ProductCultureDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductID;
		
		private int _CultureID;
		
		private string _Description;
		
		private string _ShortDescription;
		
		private System.Nullable<decimal> _UnitPrice;
		
		private EntityRef<Culture> _Culture;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnCultureIDChanging(int value);
    partial void OnCultureIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnShortDescriptionChanging(string value);
    partial void OnShortDescriptionChanged();
    partial void OnUnitPriceChanging(System.Nullable<decimal> value);
    partial void OnUnitPriceChanged();
    #endregion
		
		public ProductCultureDetail()
		{
			this._Culture = default(EntityRef<Culture>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[Column(Storage="_ProductID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[Column(Storage="_CultureID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CultureID
		{
			get
			{
				return this._CultureID;
			}
			set
			{
				if ((this._CultureID != value))
				{
					if (this._Culture.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCultureIDChanging(value);
					this.SendPropertyChanging();
					this._CultureID = value;
					this.SendPropertyChanged("CultureID");
					this.OnCultureIDChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_ShortDescription", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string ShortDescription
		{
			get
			{
				return this._ShortDescription;
			}
			set
			{
				if ((this._ShortDescription != value))
				{
					this.OnShortDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ShortDescription = value;
					this.SendPropertyChanged("ShortDescription");
					this.OnShortDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_UnitPrice", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this.OnUnitPriceChanging(value);
					this.SendPropertyChanging();
					this._UnitPrice = value;
					this.SendPropertyChanged("UnitPrice");
					this.OnUnitPriceChanged();
				}
			}
		}
		
		[Association(Name="Culture_ProductCultureDetail", Storage="_Culture", ThisKey="CultureID", OtherKey="CultureID", IsForeignKey=true)]
		public Culture Culture
		{
			get
			{
				return this._Culture.Entity;
			}
			set
			{
				Culture previousValue = this._Culture.Entity;
				if (((previousValue != value) 
							|| (this._Culture.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Culture.Entity = null;
						previousValue.ProductCultureDetails.Remove(this);
					}
					this._Culture.Entity = value;
					if ((value != null))
					{
						value.ProductCultureDetails.Add(this);
						this._CultureID = value.CultureID;
					}
					else
					{
						this._CultureID = default(int);
					}
					this.SendPropertyChanged("Culture");
				}
			}
		}
		
		[Association(Name="Product_ProductCultureDetail", Storage="_Product", ThisKey="ProductID", OtherKey="ProductID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductCultureDetails.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductCultureDetails.Add(this);
						this._ProductID = value.ProductID;
					}
					else
					{
						this._ProductID = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ProductReviews")]
	public partial class ProductReview : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductReviewID;
		
		private int _ProductID;
		
		private string _Author;
		
		private System.DateTime _ReviewDate;
		
		private string _Email;
		
		private string _Body;
		
		private int _CultureID;
		
		private EntityRef<Culture> _Culture;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductReviewIDChanging(int value);
    partial void OnProductReviewIDChanged();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnReviewDateChanging(System.DateTime value);
    partial void OnReviewDateChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnBodyChanging(string value);
    partial void OnBodyChanged();
    partial void OnCultureIDChanging(int value);
    partial void OnCultureIDChanged();
    #endregion
		
		public ProductReview()
		{
			this._Culture = default(EntityRef<Culture>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[Column(Storage="_ProductReviewID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductReviewID
		{
			get
			{
				return this._ProductReviewID;
			}
			set
			{
				if ((this._ProductReviewID != value))
				{
					this.OnProductReviewIDChanging(value);
					this.SendPropertyChanging();
					this._ProductReviewID = value;
					this.SendPropertyChanged("ProductReviewID");
					this.OnProductReviewIDChanged();
				}
			}
		}
		
		[Column(Storage="_ProductID", DbType="Int NOT NULL")]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[Column(Storage="_Author", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[Column(Storage="_ReviewDate", DbType="DateTime NOT NULL")]
		public System.DateTime ReviewDate
		{
			get
			{
				return this._ReviewDate;
			}
			set
			{
				if ((this._ReviewDate != value))
				{
					this.OnReviewDateChanging(value);
					this.SendPropertyChanging();
					this._ReviewDate = value;
					this.SendPropertyChanged("ReviewDate");
					this.OnReviewDateChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_Body", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Body
		{
			get
			{
				return this._Body;
			}
			set
			{
				if ((this._Body != value))
				{
					this.OnBodyChanging(value);
					this.SendPropertyChanging();
					this._Body = value;
					this.SendPropertyChanged("Body");
					this.OnBodyChanged();
				}
			}
		}
		
		[Column(Storage="_CultureID", DbType="Int NOT NULL")]
		public int CultureID
		{
			get
			{
				return this._CultureID;
			}
			set
			{
				if ((this._CultureID != value))
				{
					if (this._Culture.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCultureIDChanging(value);
					this.SendPropertyChanging();
					this._CultureID = value;
					this.SendPropertyChanged("CultureID");
					this.OnCultureIDChanged();
				}
			}
		}
		
		[Association(Name="Culture_ProductReview", Storage="_Culture", ThisKey="CultureID", OtherKey="CultureID", IsForeignKey=true)]
		public Culture Culture
		{
			get
			{
				return this._Culture.Entity;
			}
			set
			{
				Culture previousValue = this._Culture.Entity;
				if (((previousValue != value) 
							|| (this._Culture.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Culture.Entity = null;
						previousValue.ProductReviews.Remove(this);
					}
					this._Culture.Entity = value;
					if ((value != null))
					{
						value.ProductReviews.Add(this);
						this._CultureID = value.CultureID;
					}
					else
					{
						this._CultureID = default(int);
					}
					this.SendPropertyChanged("Culture");
				}
			}
		}
		
		[Association(Name="Product_ProductReview", Storage="_Product", ThisKey="ProductID", OtherKey="ProductID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductReviews.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductReviews.Add(this);
						this._ProductID = value.ProductID;
					}
					else
					{
						this._ProductID = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ProductImages")]
	public partial class ProductImage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductImageID;
		
		private int _ProductID;
		
		private string _ThumbUrl;
		
		private string _FullImageUrl;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductImageIDChanging(int value);
    partial void OnProductImageIDChanged();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnThumbUrlChanging(string value);
    partial void OnThumbUrlChanged();
    partial void OnFullImageUrlChanging(string value);
    partial void OnFullImageUrlChanged();
    #endregion
		
		public ProductImage()
		{
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[Column(Storage="_ProductImageID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductImageID
		{
			get
			{
				return this._ProductImageID;
			}
			set
			{
				if ((this._ProductImageID != value))
				{
					this.OnProductImageIDChanging(value);
					this.SendPropertyChanging();
					this._ProductImageID = value;
					this.SendPropertyChanged("ProductImageID");
					this.OnProductImageIDChanged();
				}
			}
		}
		
		[Column(Storage="_ProductID", DbType="Int NOT NULL")]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[Column(Storage="_ThumbUrl", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string ThumbUrl
		{
			get
			{
				return this._ThumbUrl;
			}
			set
			{
				if ((this._ThumbUrl != value))
				{
					this.OnThumbUrlChanging(value);
					this.SendPropertyChanging();
					this._ThumbUrl = value;
					this.SendPropertyChanged("ThumbUrl");
					this.OnThumbUrlChanged();
				}
			}
		}
		
		[Column(Storage="_FullImageUrl", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string FullImageUrl
		{
			get
			{
				return this._FullImageUrl;
			}
			set
			{
				if ((this._FullImageUrl != value))
				{
					this.OnFullImageUrlChanging(value);
					this.SendPropertyChanging();
					this._FullImageUrl = value;
					this.SendPropertyChanged("FullImageUrl");
					this.OnFullImageUrlChanged();
				}
			}
		}
		
		[Association(Name="Product_ProductImage", Storage="_Product", ThisKey="ProductID", OtherKey="ProductID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductImages.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductImages.Add(this);
						this._ProductID = value.ProductID;
					}
					else
					{
						this._ProductID = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Categories")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryID;
		
		private System.Nullable<int> _ParentID;
		
		private string _ThumbUrl;
		
		private string _FullImageUrl;
		
		private bool _IsDefault;
		
		private string _CategoryName;
		
		private EntitySet<Categories_Product> _Categories_Products;
		
		private EntitySet<CategoryCultureDetail> _CategoryCultureDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnParentIDChanging(System.Nullable<int> value);
    partial void OnParentIDChanged();
    partial void OnThumbUrlChanging(string value);
    partial void OnThumbUrlChanged();
    partial void OnFullImageUrlChanging(string value);
    partial void OnFullImageUrlChanged();
    partial void OnIsDefaultChanging(bool value);
    partial void OnIsDefaultChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    #endregion
		
		public Category()
		{
			this._Categories_Products = new EntitySet<Categories_Product>(new Action<Categories_Product>(this.attach_Categories_Products), new Action<Categories_Product>(this.detach_Categories_Products));
			this._CategoryCultureDetails = new EntitySet<CategoryCultureDetail>(new Action<CategoryCultureDetail>(this.attach_CategoryCultureDetails), new Action<CategoryCultureDetail>(this.detach_CategoryCultureDetails));
			OnCreated();
		}
		
		[Column(Storage="_CategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[Column(Storage="_ParentID", DbType="Int")]
		public System.Nullable<int> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[Column(Storage="_ThumbUrl", DbType="NVarChar(150)")]
		public string ThumbUrl
		{
			get
			{
				return this._ThumbUrl;
			}
			set
			{
				if ((this._ThumbUrl != value))
				{
					this.OnThumbUrlChanging(value);
					this.SendPropertyChanging();
					this._ThumbUrl = value;
					this.SendPropertyChanged("ThumbUrl");
					this.OnThumbUrlChanged();
				}
			}
		}
		
		[Column(Storage="_FullImageUrl", DbType="NVarChar(150)")]
		public string FullImageUrl
		{
			get
			{
				return this._FullImageUrl;
			}
			set
			{
				if ((this._FullImageUrl != value))
				{
					this.OnFullImageUrlChanging(value);
					this.SendPropertyChanging();
					this._FullImageUrl = value;
					this.SendPropertyChanged("FullImageUrl");
					this.OnFullImageUrlChanged();
				}
			}
		}
		
		[Column(Storage="_IsDefault", DbType="Bit NOT NULL")]
		public bool IsDefault
		{
			get
			{
				return this._IsDefault;
			}
			set
			{
				if ((this._IsDefault != value))
				{
					this.OnIsDefaultChanging(value);
					this.SendPropertyChanging();
					this._IsDefault = value;
					this.SendPropertyChanged("IsDefault");
					this.OnIsDefaultChanged();
				}
			}
		}
		
		[Column(Storage="_CategoryName", DbType="nvarchar(150) NOT NULL", CanBeNull=false)]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[Association(Name="Category_Categories_Product", Storage="_Categories_Products", ThisKey="CategoryID", OtherKey="CategoryID")]
		public EntitySet<Categories_Product> Categories_Products
		{
			get
			{
				return this._Categories_Products;
			}
			set
			{
				this._Categories_Products.Assign(value);
			}
		}
		
		[Association(Name="Category_CategoryCultureDetail", Storage="_CategoryCultureDetails", ThisKey="CategoryID", OtherKey="CategoryID")]
		public EntitySet<CategoryCultureDetail> CategoryCultureDetails
		{
			get
			{
				return this._CategoryCultureDetails;
			}
			set
			{
				this._CategoryCultureDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Categories_Products(Categories_Product entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Categories_Products(Categories_Product entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
		
		private void attach_CategoryCultureDetails(CategoryCultureDetail entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_CategoryCultureDetails(CategoryCultureDetail entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[Table(Name="dbo.Products_Related")]
	public partial class Products_Related : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductID;
		
		private int _RelatedProductID;
		
		private EntityRef<Product> _Product;
		
		private EntityRef<Product> _Product1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnRelatedProductIDChanging(int value);
    partial void OnRelatedProductIDChanged();
    #endregion
		
		public Products_Related()
		{
			this._Product = default(EntityRef<Product>);
			this._Product1 = default(EntityRef<Product>);
			OnCreated();
		}
		
		[Column(Storage="_ProductID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[Column(Storage="_RelatedProductID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RelatedProductID
		{
			get
			{
				return this._RelatedProductID;
			}
			set
			{
				if ((this._RelatedProductID != value))
				{
					if (this._Product1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRelatedProductIDChanging(value);
					this.SendPropertyChanging();
					this._RelatedProductID = value;
					this.SendPropertyChanged("RelatedProductID");
					this.OnRelatedProductIDChanged();
				}
			}
		}
		
		[Association(Name="Product_Products_Related", Storage="_Product", ThisKey="ProductID", OtherKey="ProductID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Products_Relateds.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Products_Relateds.Add(this);
						this._ProductID = value.ProductID;
					}
					else
					{
						this._ProductID = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[Association(Name="Product_Products_Related1", Storage="_Product1", ThisKey="RelatedProductID", OtherKey="ProductID", IsForeignKey=true)]
		public Product Product1
		{
			get
			{
				return this._Product1.Entity;
			}
			set
			{
				Product previousValue = this._Product1.Entity;
				if (((previousValue != value) 
							|| (this._Product1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product1.Entity = null;
						previousValue.Products_Relateds1.Remove(this);
					}
					this._Product1.Entity = value;
					if ((value != null))
					{
						value.Products_Relateds1.Add(this);
						this._RelatedProductID = value.ProductID;
					}
					else
					{
						this._RelatedProductID = default(int);
					}
					this.SendPropertyChanged("Product1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Products_CrossSell")]
	public partial class Products_CrossSell : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductID;
		
		private int _CrossProductID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnCrossProductIDChanging(int value);
    partial void OnCrossProductIDChanged();
    #endregion
		
		public Products_CrossSell()
		{
			OnCreated();
		}
		
		[Column(Storage="_ProductID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[Column(Storage="_CrossProductID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CrossProductID
		{
			get
			{
				return this._CrossProductID;
			}
			set
			{
				if ((this._CrossProductID != value))
				{
					this.OnCrossProductIDChanging(value);
					this.SendPropertyChanging();
					this._CrossProductID = value;
					this.SendPropertyChanged("CrossProductID");
					this.OnCrossProductIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.OrderStatus")]
	public partial class OrderStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderStatusID;
		
		private string _Description;
		
		private EntitySet<Order> _Orders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderStatusIDChanging(int value);
    partial void OnOrderStatusIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public OrderStatus()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			OnCreated();
		}
		
		[Column(Storage="_OrderStatusID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrderStatusID
		{
			get
			{
				return this._OrderStatusID;
			}
			set
			{
				if ((this._OrderStatusID != value))
				{
					this.OnOrderStatusIDChanging(value);
					this.SendPropertyChanging();
					this._OrderStatusID = value;
					this.SendPropertyChanged("OrderStatusID");
					this.OnOrderStatusIDChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="OrderStatus_Order", Storage="_Orders", ThisKey="OrderStatusID", OtherKey="OrderStatusID")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.OrderStatus = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.OrderStatus = null;
		}
	}
	
	[Table(Name="dbo.DeliveryMethod")]
	public partial class DeliveryMethod : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DeliveryMethodID;
		
		private string _Description;
		
		private EntitySet<Product> _Products;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDeliveryMethodIDChanging(int value);
    partial void OnDeliveryMethodIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public DeliveryMethod()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			OnCreated();
		}
		
		[Column(Storage="_DeliveryMethodID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DeliveryMethodID
		{
			get
			{
				return this._DeliveryMethodID;
			}
			set
			{
				if ((this._DeliveryMethodID != value))
				{
					this.OnDeliveryMethodIDChanging(value);
					this.SendPropertyChanging();
					this._DeliveryMethodID = value;
					this.SendPropertyChanged("DeliveryMethodID");
					this.OnDeliveryMethodIDChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="DeliveryMethod_Product", Storage="_Products", ThisKey="DeliveryMethodID", OtherKey="DeliveryMethodID")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.DeliveryMethod = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.DeliveryMethod = null;
		}
	}
	
	[Table(Name="dbo.TransactionProcessors")]
	public partial class TransactionProcessor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProcessorID;
		
		private string _Description;
		
		private EntitySet<Transactions> _Transactions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProcessorIDChanging(int value);
    partial void OnProcessorIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public TransactionProcessor()
		{
			this._Transactions = new EntitySet<Transactions>(new Action<Transactions>(this.attach_Transactions), new Action<Transactions>(this.detach_Transactions));
			OnCreated();
		}
		
		[Column(Storage="_ProcessorID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProcessorID
		{
			get
			{
				return this._ProcessorID;
			}
			set
			{
				if ((this._ProcessorID != value))
				{
					this.OnProcessorIDChanging(value);
					this.SendPropertyChanging();
					this._ProcessorID = value;
					this.SendPropertyChanged("ProcessorID");
					this.OnProcessorIDChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="TransactionProcessor_Transactions", Storage="_Transactions", ThisKey="ProcessorID", OtherKey="ProcessorID")]
		public EntitySet<Transactions> Transactions
		{
			get
			{
				return this._Transactions;
			}
			set
			{
				this._Transactions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Transactions(Transactions entity)
		{
			this.SendPropertyChanging();
			entity.TransactionProcessor = this;
		}
		
		private void detach_Transactions(Transactions entity)
		{
			this.SendPropertyChanging();
			entity.TransactionProcessor = null;
		}
	}
	
	[Table(Name="dbo.Transactions")]
	public partial class Transactions : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _TransactionID;
		
		private System.Guid _OrderID;
		
		private System.DateTime _TransactionDate;
		
		private decimal _Amount;
		
		private string _AuthorizationCode;
		
		private string _Notes;
		
		private int _ProcessorID;
		
		private EntityRef<TransactionProcessor> _TransactionProcessor;
		
		private EntityRef<Order> _Order;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTransactionIDChanging(System.Guid value);
    partial void OnTransactionIDChanged();
    partial void OnOrderIDChanging(System.Guid value);
    partial void OnOrderIDChanged();
    partial void OnTransactionDateChanging(System.DateTime value);
    partial void OnTransactionDateChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnAuthorizationCodeChanging(string value);
    partial void OnAuthorizationCodeChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnProcessorIDChanging(int value);
    partial void OnProcessorIDChanged();
    #endregion
		
		public Transactions()
		{
			this._TransactionProcessor = default(EntityRef<TransactionProcessor>);
			this._Order = default(EntityRef<Order>);
			OnCreated();
		}
		
		[Column(Storage="_TransactionID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid TransactionID
		{
			get
			{
				return this._TransactionID;
			}
			set
			{
				if ((this._TransactionID != value))
				{
					this.OnTransactionIDChanging(value);
					this.SendPropertyChanging();
					this._TransactionID = value;
					this.SendPropertyChanged("TransactionID");
					this.OnTransactionIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrderID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[Column(Storage="_TransactionDate", DbType="DateTime NOT NULL")]
		public System.DateTime TransactionDate
		{
			get
			{
				return this._TransactionDate;
			}
			set
			{
				if ((this._TransactionDate != value))
				{
					this.OnTransactionDateChanging(value);
					this.SendPropertyChanging();
					this._TransactionDate = value;
					this.SendPropertyChanged("TransactionDate");
					this.OnTransactionDateChanged();
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Column(Storage="_AuthorizationCode", DbType="NVarChar(50)")]
		public string AuthorizationCode
		{
			get
			{
				return this._AuthorizationCode;
			}
			set
			{
				if ((this._AuthorizationCode != value))
				{
					this.OnAuthorizationCodeChanging(value);
					this.SendPropertyChanging();
					this._AuthorizationCode = value;
					this.SendPropertyChanged("AuthorizationCode");
					this.OnAuthorizationCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Notes", DbType="NVarChar(50)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[Column(Storage="_ProcessorID", DbType="Int NOT NULL")]
		public int ProcessorID
		{
			get
			{
				return this._ProcessorID;
			}
			set
			{
				if ((this._ProcessorID != value))
				{
					if (this._TransactionProcessor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProcessorIDChanging(value);
					this.SendPropertyChanging();
					this._ProcessorID = value;
					this.SendPropertyChanged("ProcessorID");
					this.OnProcessorIDChanged();
				}
			}
		}
		
		[Association(Name="TransactionProcessor_Transactions", Storage="_TransactionProcessor", ThisKey="ProcessorID", OtherKey="ProcessorID", IsForeignKey=true)]
		public TransactionProcessor TransactionProcessor
		{
			get
			{
				return this._TransactionProcessor.Entity;
			}
			set
			{
				TransactionProcessor previousValue = this._TransactionProcessor.Entity;
				if (((previousValue != value) 
							|| (this._TransactionProcessor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TransactionProcessor.Entity = null;
						previousValue.Transactions.Remove(this);
					}
					this._TransactionProcessor.Entity = value;
					if ((value != null))
					{
						value.Transactions.Add(this);
						this._ProcessorID = value.ProcessorID;
					}
					else
					{
						this._ProcessorID = default(int);
					}
					this.SendPropertyChanged("TransactionProcessor");
				}
			}
		}
		
		[Association(Name="Order_Transactions", Storage="_Order", ThisKey="OrderID", OtherKey="OrderID", IsForeignKey=true)]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.Transactions.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.Transactions.Add(this);
						this._OrderID = value.OrderID;
					}
					else
					{
						this._OrderID = default(System.Guid);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.TaxRates")]
	public partial class TaxRate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TaxRateID;
		
		private decimal _Rate;
		
		private string _Region;
		
		private string _Country;
		
		private string _PostalCode;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaxRateIDChanging(int value);
    partial void OnTaxRateIDChanged();
    partial void OnRateChanging(decimal value);
    partial void OnRateChanged();
    partial void OnRegionChanging(string value);
    partial void OnRegionChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnPostalCodeChanging(string value);
    partial void OnPostalCodeChanged();
    #endregion
		
		public TaxRate()
		{
			OnCreated();
		}
		
		[Column(Storage="_TaxRateID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TaxRateID
		{
			get
			{
				return this._TaxRateID;
			}
			set
			{
				if ((this._TaxRateID != value))
				{
					this.OnTaxRateIDChanging(value);
					this.SendPropertyChanging();
					this._TaxRateID = value;
					this.SendPropertyChanged("TaxRateID");
					this.OnTaxRateIDChanged();
				}
			}
		}
		
		[Column(Storage="_Rate", DbType="Money NOT NULL")]
		public decimal Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				if ((this._Rate != value))
				{
					this.OnRateChanging(value);
					this.SendPropertyChanging();
					this._Rate = value;
					this.SendPropertyChanged("Rate");
					this.OnRateChanged();
				}
			}
		}
		
		[Column(Storage="_Region", DbType="Char(2) NOT NULL", CanBeNull=false)]
		public string Region
		{
			get
			{
				return this._Region;
			}
			set
			{
				if ((this._Region != value))
				{
					this.OnRegionChanging(value);
					this.SendPropertyChanging();
					this._Region = value;
					this.SendPropertyChanged("Region");
					this.OnRegionChanged();
				}
			}
		}
		
		[Column(Storage="_Country", DbType="Char(2) NOT NULL", CanBeNull=false)]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[Column(Storage="_PostalCode", DbType="NVarChar(50)")]
		public string PostalCode
		{
			get
			{
				return this._PostalCode;
			}
			set
			{
				if ((this._PostalCode != value))
				{
					this.OnPostalCodeChanging(value);
					this.SendPropertyChanging();
					this._PostalCode = value;
					this.SendPropertyChanged("PostalCode");
					this.OnPostalCodeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.InventoryStatus")]
	public partial class InventoryStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InventoryStatusID;
		
		private string _Description;
		
		private EntitySet<Product> _Products;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInventoryStatusIDChanging(int value);
    partial void OnInventoryStatusIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public InventoryStatus()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			OnCreated();
		}
		
		[Column(Storage="_InventoryStatusID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int InventoryStatusID
		{
			get
			{
				return this._InventoryStatusID;
			}
			set
			{
				if ((this._InventoryStatusID != value))
				{
					this.OnInventoryStatusIDChanging(value);
					this.SendPropertyChanging();
					this._InventoryStatusID = value;
					this.SendPropertyChanged("InventoryStatusID");
					this.OnInventoryStatusIDChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="InventoryStatus_Product", Storage="_Products", ThisKey="InventoryStatusID", OtherKey="InventoryStatusID")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.InventoryStatus = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.InventoryStatus = null;
		}
	}
	
	[Table(Name="dbo.InventoryRecords")]
	public partial class InventoryRecord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InventoryRecordID;
		
		private int _ProductID;
		
		private int _Increment;
		
		private System.DateTime _DateEntered;
		
		private string _Notes;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInventoryRecordIDChanging(int value);
    partial void OnInventoryRecordIDChanged();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnIncrementChanging(int value);
    partial void OnIncrementChanged();
    partial void OnDateEnteredChanging(System.DateTime value);
    partial void OnDateEnteredChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    #endregion
		
		public InventoryRecord()
		{
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[Column(Storage="_InventoryRecordID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int InventoryRecordID
		{
			get
			{
				return this._InventoryRecordID;
			}
			set
			{
				if ((this._InventoryRecordID != value))
				{
					this.OnInventoryRecordIDChanging(value);
					this.SendPropertyChanging();
					this._InventoryRecordID = value;
					this.SendPropertyChanged("InventoryRecordID");
					this.OnInventoryRecordIDChanged();
				}
			}
		}
		
		[Column(Storage="_ProductID", DbType="Int NOT NULL")]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[Column(Storage="_Increment", DbType="Int NOT NULL")]
		public int Increment
		{
			get
			{
				return this._Increment;
			}
			set
			{
				if ((this._Increment != value))
				{
					this.OnIncrementChanging(value);
					this.SendPropertyChanging();
					this._Increment = value;
					this.SendPropertyChanged("Increment");
					this.OnIncrementChanged();
				}
			}
		}
		
		[Column(Storage="_DateEntered", DbType="DateTime NOT NULL")]
		public System.DateTime DateEntered
		{
			get
			{
				return this._DateEntered;
			}
			set
			{
				if ((this._DateEntered != value))
				{
					this.OnDateEnteredChanging(value);
					this.SendPropertyChanging();
					this._DateEntered = value;
					this.SendPropertyChanged("DateEntered");
					this.OnDateEnteredChanged();
				}
			}
		}
		
		[Column(Storage="_Notes", DbType="NVarChar(500)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[Association(Name="Product_InventoryRecord", Storage="_Product", ThisKey="ProductID", OtherKey="ProductID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.InventoryRecords.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.InventoryRecords.Add(this);
						this._ProductID = value.ProductID;
					}
					else
					{
						this._ProductID = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MailerTemplateType")]
	public partial class MailerTemplateType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MailerTypeID;
		
		private string _Description;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMailerTypeIDChanging(int value);
    partial void OnMailerTypeIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public MailerTemplateType()
		{
			OnCreated();
		}
		
		[Column(Storage="_MailerTypeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MailerTypeID
		{
			get
			{
				return this._MailerTypeID;
			}
			set
			{
				if ((this._MailerTypeID != value))
				{
					this.OnMailerTypeIDChanging(value);
					this.SendPropertyChanging();
					this._MailerTypeID = value;
					this.SendPropertyChanged("MailerTypeID");
					this.OnMailerTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MailerTemplates")]
	public partial class MailerTemplate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MailerTypeID;
		
		private int _CultureID;
		
		private string _Subject;
		
		private string _Body;
		
		private bool _IsHtml;
		
		private EntityRef<Culture> _Culture;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMailerTypeIDChanging(int value);
    partial void OnMailerTypeIDChanged();
    partial void OnCultureIDChanging(int value);
    partial void OnCultureIDChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    partial void OnBodyChanging(string value);
    partial void OnBodyChanged();
    partial void OnIsHtmlChanging(bool value);
    partial void OnIsHtmlChanged();
    #endregion
		
		public MailerTemplate()
		{
			this._Culture = default(EntityRef<Culture>);
			OnCreated();
		}
		
		[Column(Storage="_MailerTypeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MailerTypeID
		{
			get
			{
				return this._MailerTypeID;
			}
			set
			{
				if ((this._MailerTypeID != value))
				{
					this.OnMailerTypeIDChanging(value);
					this.SendPropertyChanging();
					this._MailerTypeID = value;
					this.SendPropertyChanged("MailerTypeID");
					this.OnMailerTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_CultureID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CultureID
		{
			get
			{
				return this._CultureID;
			}
			set
			{
				if ((this._CultureID != value))
				{
					if (this._Culture.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCultureIDChanging(value);
					this.SendPropertyChanging();
					this._CultureID = value;
					this.SendPropertyChanged("CultureID");
					this.OnCultureIDChanged();
				}
			}
		}
		
		[Column(Storage="_Subject", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				if ((this._Subject != value))
				{
					this.OnSubjectChanging(value);
					this.SendPropertyChanging();
					this._Subject = value;
					this.SendPropertyChanged("Subject");
					this.OnSubjectChanged();
				}
			}
		}
		
		[Column(Storage="_Body", DbType="NChar(2500) NOT NULL", CanBeNull=false)]
		public string Body
		{
			get
			{
				return this._Body;
			}
			set
			{
				if ((this._Body != value))
				{
					this.OnBodyChanging(value);
					this.SendPropertyChanging();
					this._Body = value;
					this.SendPropertyChanged("Body");
					this.OnBodyChanged();
				}
			}
		}
		
		[Column(Storage="_IsHtml", DbType="Bit NOT NULL")]
		public bool IsHtml
		{
			get
			{
				return this._IsHtml;
			}
			set
			{
				if ((this._IsHtml != value))
				{
					this.OnIsHtmlChanging(value);
					this.SendPropertyChanging();
					this._IsHtml = value;
					this.SendPropertyChanged("IsHtml");
					this.OnIsHtmlChanged();
				}
			}
		}
		
		[Association(Name="Culture_MailerTemplate", Storage="_Culture", ThisKey="CultureID", OtherKey="CultureID", IsForeignKey=true)]
		public Culture Culture
		{
			get
			{
				return this._Culture.Entity;
			}
			set
			{
				Culture previousValue = this._Culture.Entity;
				if (((previousValue != value) 
							|| (this._Culture.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Culture.Entity = null;
						previousValue.MailerTemplates.Remove(this);
					}
					this._Culture.Entity = value;
					if ((value != null))
					{
						value.MailerTemplates.Add(this);
						this._CultureID = value.CultureID;
					}
					else
					{
						this._CultureID = default(int);
					}
					this.SendPropertyChanged("Culture");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Addresses")]
	public partial class Address : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AddressID;
		
		private string _UserName;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Email;
		
		private string _Street1;
		
		private string _Street2;
		
		private string _City;
		
		private string _StateOrProvince;
		
		private string _Zip;
		
		private string _Country;
		
		private string _Latitude;
		
		private string _Longitude;
		
		private bool _IsDefault;
		
		private EntitySet<Order> _Orders;
		
		private EntitySet<Order> _Orders1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAddressIDChanging(int value);
    partial void OnAddressIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnStreet1Changing(string value);
    partial void OnStreet1Changed();
    partial void OnStreet2Changing(string value);
    partial void OnStreet2Changed();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateOrProvinceChanging(string value);
    partial void OnStateOrProvinceChanged();
    partial void OnZipChanging(string value);
    partial void OnZipChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnLatitudeChanging(string value);
    partial void OnLatitudeChanged();
    partial void OnLongitudeChanging(string value);
    partial void OnLongitudeChanged();
    partial void OnIsDefaultChanging(bool value);
    partial void OnIsDefaultChanged();
    #endregion
		
		public Address()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._Orders1 = new EntitySet<Order>(new Action<Order>(this.attach_Orders1), new Action<Order>(this.detach_Orders1));
			OnCreated();
		}
		
		[Column(Storage="_AddressID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AddressID
		{
			get
			{
				return this._AddressID;
			}
			set
			{
				if ((this._AddressID != value))
				{
					this.OnAddressIDChanging(value);
					this.SendPropertyChanging();
					this._AddressID = value;
					this.SendPropertyChanged("AddressID");
					this.OnAddressIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_Street1", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Street1
		{
			get
			{
				return this._Street1;
			}
			set
			{
				if ((this._Street1 != value))
				{
					this.OnStreet1Changing(value);
					this.SendPropertyChanging();
					this._Street1 = value;
					this.SendPropertyChanged("Street1");
					this.OnStreet1Changed();
				}
			}
		}
		
		[Column(Storage="_Street2", DbType="NVarChar(50)")]
		public string Street2
		{
			get
			{
				return this._Street2;
			}
			set
			{
				if ((this._Street2 != value))
				{
					this.OnStreet2Changing(value);
					this.SendPropertyChanging();
					this._Street2 = value;
					this.SendPropertyChanged("Street2");
					this.OnStreet2Changed();
				}
			}
		}
		
		[Column(Storage="_City", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[Column(Storage="_StateOrProvince", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string StateOrProvince
		{
			get
			{
				return this._StateOrProvince;
			}
			set
			{
				if ((this._StateOrProvince != value))
				{
					this.OnStateOrProvinceChanging(value);
					this.SendPropertyChanging();
					this._StateOrProvince = value;
					this.SendPropertyChanged("StateOrProvince");
					this.OnStateOrProvinceChanged();
				}
			}
		}
		
		[Column(Storage="_Zip", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Zip
		{
			get
			{
				return this._Zip;
			}
			set
			{
				if ((this._Zip != value))
				{
					this.OnZipChanging(value);
					this.SendPropertyChanging();
					this._Zip = value;
					this.SendPropertyChanged("Zip");
					this.OnZipChanged();
				}
			}
		}
		
		[Column(Storage="_Country", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[Column(Storage="_Latitude", DbType="NVarChar(50)")]
		public string Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[Column(Storage="_Longitude", DbType="NVarChar(50)")]
		public string Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[Column(Storage="_IsDefault", DbType="Bit NOT NULL")]
		public bool IsDefault
		{
			get
			{
				return this._IsDefault;
			}
			set
			{
				if ((this._IsDefault != value))
				{
					this.OnIsDefaultChanging(value);
					this.SendPropertyChanging();
					this._IsDefault = value;
					this.SendPropertyChanged("IsDefault");
					this.OnIsDefaultChanged();
				}
			}
		}
		
		[Association(Name="Address_Order", Storage="_Orders", ThisKey="AddressID", OtherKey="BillingAddressID")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[Association(Name="Address_Order1", Storage="_Orders1", ThisKey="AddressID", OtherKey="ShippingAddressID")]
		public EntitySet<Order> Orders1
		{
			get
			{
				return this._Orders1;
			}
			set
			{
				this._Orders1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
		
		private void attach_Orders1(Order entity)
		{
			this.SendPropertyChanging();
			entity.Address1 = this;
		}
		
		private void detach_Orders1(Order entity)
		{
			this.SendPropertyChanging();
			entity.Address1 = null;
		}
	}
	
	[Table(Name="dbo.UseBehaviors")]
	public partial class UseBehavior : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserBehaviorID;
		
		private string _Description;
		
		private EntitySet<UserEvent> _UserEvents;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserBehaviorIDChanging(int value);
    partial void OnUserBehaviorIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public UseBehavior()
		{
			this._UserEvents = new EntitySet<UserEvent>(new Action<UserEvent>(this.attach_UserEvents), new Action<UserEvent>(this.detach_UserEvents));
			OnCreated();
		}
		
		[Column(Storage="_UserBehaviorID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserBehaviorID
		{
			get
			{
				return this._UserBehaviorID;
			}
			set
			{
				if ((this._UserBehaviorID != value))
				{
					this.OnUserBehaviorIDChanging(value);
					this.SendPropertyChanging();
					this._UserBehaviorID = value;
					this.SendPropertyChanged("UserBehaviorID");
					this.OnUserBehaviorIDChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="UseBehavior_UserEvent", Storage="_UserEvents", ThisKey="UserBehaviorID", OtherKey="UserBehaviorID")]
		public EntitySet<UserEvent> UserEvents
		{
			get
			{
				return this._UserEvents;
			}
			set
			{
				this._UserEvents.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserEvents(UserEvent entity)
		{
			this.SendPropertyChanging();
			entity.UseBehavior = this;
		}
		
		private void detach_UserEvents(UserEvent entity)
		{
			this.SendPropertyChanging();
			entity.UseBehavior = null;
		}
	}
	
	[Table(Name="dbo.UserEvents")]
	public partial class UserEvent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EventID;
		
		private int _UserBehaviorID;
		
		private string _UserName;
		
		private System.DateTime _EventDate;
		
		private string _IP;
		
		private System.Nullable<int> _ProductID;
		
		private System.Nullable<int> _CategoryID;
		
		private System.Nullable<System.Guid> _OrderID;
		
		private EntityRef<UseBehavior> _UseBehavior;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIDChanging(int value);
    partial void OnEventIDChanged();
    partial void OnUserBehaviorIDChanging(int value);
    partial void OnUserBehaviorIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnEventDateChanging(System.DateTime value);
    partial void OnEventDateChanged();
    partial void OnIPChanging(string value);
    partial void OnIPChanged();
    partial void OnProductIDChanging(System.Nullable<int> value);
    partial void OnProductIDChanged();
    partial void OnCategoryIDChanging(System.Nullable<int> value);
    partial void OnCategoryIDChanged();
    partial void OnOrderIDChanging(System.Nullable<System.Guid> value);
    partial void OnOrderIDChanged();
    #endregion
		
		public UserEvent()
		{
			this._UseBehavior = default(EntityRef<UseBehavior>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_EventID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserBehaviorID", DbType="Int NOT NULL")]
		public int UserBehaviorID
		{
			get
			{
				return this._UserBehaviorID;
			}
			set
			{
				if ((this._UserBehaviorID != value))
				{
					if (this._UseBehavior.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserBehaviorIDChanging(value);
					this.SendPropertyChanging();
					this._UserBehaviorID = value;
					this.SendPropertyChanged("UserBehaviorID");
					this.OnUserBehaviorIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_EventDate", DbType="DateTime NOT NULL")]
		public System.DateTime EventDate
		{
			get
			{
				return this._EventDate;
			}
			set
			{
				if ((this._EventDate != value))
				{
					this.OnEventDateChanging(value);
					this.SendPropertyChanging();
					this._EventDate = value;
					this.SendPropertyChanged("EventDate");
					this.OnEventDateChanged();
				}
			}
		}
		
		[Column(Storage="_IP", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string IP
		{
			get
			{
				return this._IP;
			}
			set
			{
				if ((this._IP != value))
				{
					this.OnIPChanging(value);
					this.SendPropertyChanging();
					this._IP = value;
					this.SendPropertyChanged("IP");
					this.OnIPChanged();
				}
			}
		}
		
		[Column(Storage="_ProductID", DbType="Int")]
		public System.Nullable<int> ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[Column(Storage="_CategoryID", DbType="Int")]
		public System.Nullable<int> CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrderID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[Association(Name="UseBehavior_UserEvent", Storage="_UseBehavior", ThisKey="UserBehaviorID", OtherKey="UserBehaviorID", IsForeignKey=true)]
		public UseBehavior UseBehavior
		{
			get
			{
				return this._UseBehavior.Entity;
			}
			set
			{
				UseBehavior previousValue = this._UseBehavior.Entity;
				if (((previousValue != value) 
							|| (this._UseBehavior.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UseBehavior.Entity = null;
						previousValue.UserEvents.Remove(this);
					}
					this._UseBehavior.Entity = value;
					if ((value != null))
					{
						value.UserEvents.Add(this);
						this._UserBehaviorID = value.UserBehaviorID;
					}
					else
					{
						this._UserBehaviorID = default(int);
					}
					this.SendPropertyChanged("UseBehavior");
				}
			}
		}
		
		[Association(Name="User_UserEvent", Storage="_User", ThisKey="UserName", OtherKey="UserName", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserEvents.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserEvents.Add(this);
						this._UserName = value.UserName;
					}
					else
					{
						this._UserName = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserName;
		
		private System.DateTime _CreatedOn;
		
		private System.DateTime _ModifiedOn;
		
		private EntitySet<UserEvent> _UserEvents;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnModifiedOnChanging(System.DateTime value);
    partial void OnModifiedOnChanged();
    #endregion
		
		public User()
		{
			this._UserEvents = new EntitySet<UserEvent>(new Action<UserEvent>(this.attach_UserEvents), new Action<UserEvent>(this.detach_UserEvents));
			OnCreated();
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedOn", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedOn
		{
			get
			{
				return this._ModifiedOn;
			}
			set
			{
				if ((this._ModifiedOn != value))
				{
					this.OnModifiedOnChanging(value);
					this.SendPropertyChanging();
					this._ModifiedOn = value;
					this.SendPropertyChanged("ModifiedOn");
					this.OnModifiedOnChanged();
				}
			}
		}
		
		[Association(Name="User_UserEvent", Storage="_UserEvents", ThisKey="UserName", OtherKey="UserName")]
		public EntitySet<UserEvent> UserEvents
		{
			get
			{
				return this._UserEvents;
			}
			set
			{
				this._UserEvents.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserEvents(UserEvent entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserEvents(UserEvent entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[Table(Name="dbo.ShippingMethods")]
	public partial class ShippingMethod : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ShippingMethodID;
		
		private string _Carrier;
		
		private string _ServiceName;
		
		private decimal _RatePerPound;
		
		private decimal _BaseRate;
		
		private string _EstimatedDelivery;
		
		private int _DaysToDeliver;
		
		private EntitySet<Order> _Orders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnShippingMethodIDChanging(int value);
    partial void OnShippingMethodIDChanged();
    partial void OnCarrierChanging(string value);
    partial void OnCarrierChanged();
    partial void OnServiceNameChanging(string value);
    partial void OnServiceNameChanged();
    partial void OnRatePerPoundChanging(decimal value);
    partial void OnRatePerPoundChanged();
    partial void OnBaseRateChanging(decimal value);
    partial void OnBaseRateChanged();
    partial void OnEstimatedDeliveryChanging(string value);
    partial void OnEstimatedDeliveryChanged();
    partial void OnDaysToDeliverChanging(int value);
    partial void OnDaysToDeliverChanged();
    #endregion
		
		public ShippingMethod()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			OnCreated();
		}
		
		[Column(Storage="_ShippingMethodID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ShippingMethodID
		{
			get
			{
				return this._ShippingMethodID;
			}
			set
			{
				if ((this._ShippingMethodID != value))
				{
					this.OnShippingMethodIDChanging(value);
					this.SendPropertyChanging();
					this._ShippingMethodID = value;
					this.SendPropertyChanged("ShippingMethodID");
					this.OnShippingMethodIDChanged();
				}
			}
		}
		
		[Column(Storage="_Carrier", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Carrier
		{
			get
			{
				return this._Carrier;
			}
			set
			{
				if ((this._Carrier != value))
				{
					this.OnCarrierChanging(value);
					this.SendPropertyChanging();
					this._Carrier = value;
					this.SendPropertyChanged("Carrier");
					this.OnCarrierChanged();
				}
			}
		}
		
		[Column(Storage="_ServiceName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ServiceName
		{
			get
			{
				return this._ServiceName;
			}
			set
			{
				if ((this._ServiceName != value))
				{
					this.OnServiceNameChanging(value);
					this.SendPropertyChanging();
					this._ServiceName = value;
					this.SendPropertyChanged("ServiceName");
					this.OnServiceNameChanged();
				}
			}
		}
		
		[Column(Storage="_RatePerPound", DbType="Decimal(18,0) NOT NULL")]
		public decimal RatePerPound
		{
			get
			{
				return this._RatePerPound;
			}
			set
			{
				if ((this._RatePerPound != value))
				{
					this.OnRatePerPoundChanging(value);
					this.SendPropertyChanging();
					this._RatePerPound = value;
					this.SendPropertyChanged("RatePerPound");
					this.OnRatePerPoundChanged();
				}
			}
		}
		
		[Column(Storage="_BaseRate", DbType="Decimal(18,0) NOT NULL")]
		public decimal BaseRate
		{
			get
			{
				return this._BaseRate;
			}
			set
			{
				if ((this._BaseRate != value))
				{
					this.OnBaseRateChanging(value);
					this.SendPropertyChanging();
					this._BaseRate = value;
					this.SendPropertyChanged("BaseRate");
					this.OnBaseRateChanged();
				}
			}
		}
		
		[Column(Storage="_EstimatedDelivery", DbType="NVarChar(50)")]
		public string EstimatedDelivery
		{
			get
			{
				return this._EstimatedDelivery;
			}
			set
			{
				if ((this._EstimatedDelivery != value))
				{
					this.OnEstimatedDeliveryChanging(value);
					this.SendPropertyChanging();
					this._EstimatedDelivery = value;
					this.SendPropertyChanged("EstimatedDelivery");
					this.OnEstimatedDeliveryChanged();
				}
			}
		}
		
		[Column(Storage="_DaysToDeliver", DbType="Int NOT NULL")]
		public int DaysToDeliver
		{
			get
			{
				return this._DaysToDeliver;
			}
			set
			{
				if ((this._DaysToDeliver != value))
				{
					this.OnDaysToDeliverChanging(value);
					this.SendPropertyChanging();
					this._DaysToDeliver = value;
					this.SendPropertyChanged("DaysToDeliver");
					this.OnDaysToDeliverChanged();
				}
			}
		}
		
		[Association(Name="ShippingMethod_Order", Storage="_Orders", ThisKey="ShippingMethodID", OtherKey="ShippingMethodID")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.ShippingMethod = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.ShippingMethod = null;
		}
	}
	
	[Table(Name="dbo.Products")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductID;
		
		private string _ProductCode;
		
		private int _DeliveryMethodID;
		
		private string _ProductName;
		
		private decimal _BaseUnitPrice;
		
		private decimal _DiscountPercent;
		
		private string _Description;
		
		private string _ShortDescription;
		
		private string _Manufacturer;
		
		private decimal _WeightInPounds;
		
		private int _InventoryStatusID;
		
		private string _EstimatedDelivery;
		
		private bool _AllowBackOrder;
		
		private bool _IsTaxable;
		
		private EntitySet<Categories_Product> _Categories_Products;
		
		private EntitySet<ProductCultureDetail> _ProductCultureDetails;
		
		private EntitySet<ProductReview> _ProductReviews;
		
		private EntitySet<ProductImage> _ProductImages;
		
		private EntitySet<Products_Related> _Products_Relateds;
		
		private EntitySet<Products_Related> _Products_Relateds1;
		
		private EntitySet<InventoryRecord> _InventoryRecords;
		
		private EntitySet<ProductDescriptor> _ProductDescriptors;
		
		private EntitySet<OrderItem> _OrderItems;
		
		private EntityRef<DeliveryMethod> _DeliveryMethod;
		
		private EntityRef<InventoryStatus> _InventoryStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnProductCodeChanging(string value);
    partial void OnProductCodeChanged();
    partial void OnDeliveryMethodIDChanging(int value);
    partial void OnDeliveryMethodIDChanged();
    partial void OnProductNameChanging(string value);
    partial void OnProductNameChanged();
    partial void OnBaseUnitPriceChanging(decimal value);
    partial void OnBaseUnitPriceChanged();
    partial void OnDiscountPercentChanging(decimal value);
    partial void OnDiscountPercentChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnShortDescriptionChanging(string value);
    partial void OnShortDescriptionChanged();
    partial void OnManufacturerChanging(string value);
    partial void OnManufacturerChanged();
    partial void OnWeightInPoundsChanging(decimal value);
    partial void OnWeightInPoundsChanged();
    partial void OnInventoryStatusIDChanging(int value);
    partial void OnInventoryStatusIDChanged();
    partial void OnEstimatedDeliveryChanging(string value);
    partial void OnEstimatedDeliveryChanged();
    partial void OnAllowBackOrderChanging(bool value);
    partial void OnAllowBackOrderChanged();
    partial void OnIsTaxableChanging(bool value);
    partial void OnIsTaxableChanged();
    #endregion
		
		public Product()
		{
			this._Categories_Products = new EntitySet<Categories_Product>(new Action<Categories_Product>(this.attach_Categories_Products), new Action<Categories_Product>(this.detach_Categories_Products));
			this._ProductCultureDetails = new EntitySet<ProductCultureDetail>(new Action<ProductCultureDetail>(this.attach_ProductCultureDetails), new Action<ProductCultureDetail>(this.detach_ProductCultureDetails));
			this._ProductReviews = new EntitySet<ProductReview>(new Action<ProductReview>(this.attach_ProductReviews), new Action<ProductReview>(this.detach_ProductReviews));
			this._ProductImages = new EntitySet<ProductImage>(new Action<ProductImage>(this.attach_ProductImages), new Action<ProductImage>(this.detach_ProductImages));
			this._Products_Relateds = new EntitySet<Products_Related>(new Action<Products_Related>(this.attach_Products_Relateds), new Action<Products_Related>(this.detach_Products_Relateds));
			this._Products_Relateds1 = new EntitySet<Products_Related>(new Action<Products_Related>(this.attach_Products_Relateds1), new Action<Products_Related>(this.detach_Products_Relateds1));
			this._InventoryRecords = new EntitySet<InventoryRecord>(new Action<InventoryRecord>(this.attach_InventoryRecords), new Action<InventoryRecord>(this.detach_InventoryRecords));
			this._ProductDescriptors = new EntitySet<ProductDescriptor>(new Action<ProductDescriptor>(this.attach_ProductDescriptors), new Action<ProductDescriptor>(this.detach_ProductDescriptors));
			this._OrderItems = new EntitySet<OrderItem>(new Action<OrderItem>(this.attach_OrderItems), new Action<OrderItem>(this.detach_OrderItems));
			this._DeliveryMethod = default(EntityRef<DeliveryMethod>);
			this._InventoryStatus = default(EntityRef<InventoryStatus>);
			OnCreated();
		}
		
		[Column(Storage="_ProductID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[Column(Storage="_ProductCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ProductCode
		{
			get
			{
				return this._ProductCode;
			}
			set
			{
				if ((this._ProductCode != value))
				{
					this.OnProductCodeChanging(value);
					this.SendPropertyChanging();
					this._ProductCode = value;
					this.SendPropertyChanged("ProductCode");
					this.OnProductCodeChanged();
				}
			}
		}
		
		[Column(Storage="_DeliveryMethodID", DbType="Int NOT NULL")]
		public int DeliveryMethodID
		{
			get
			{
				return this._DeliveryMethodID;
			}
			set
			{
				if ((this._DeliveryMethodID != value))
				{
					if (this._DeliveryMethod.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDeliveryMethodIDChanging(value);
					this.SendPropertyChanging();
					this._DeliveryMethodID = value;
					this.SendPropertyChanged("DeliveryMethodID");
					this.OnDeliveryMethodIDChanged();
				}
			}
		}
		
		[Column(Storage="_ProductName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ProductName
		{
			get
			{
				return this._ProductName;
			}
			set
			{
				if ((this._ProductName != value))
				{
					this.OnProductNameChanging(value);
					this.SendPropertyChanging();
					this._ProductName = value;
					this.SendPropertyChanged("ProductName");
					this.OnProductNameChanged();
				}
			}
		}
		
		[Column(Storage="_BaseUnitPrice", DbType="Decimal(18,0) NOT NULL")]
		public decimal BaseUnitPrice
		{
			get
			{
				return this._BaseUnitPrice;
			}
			set
			{
				if ((this._BaseUnitPrice != value))
				{
					this.OnBaseUnitPriceChanging(value);
					this.SendPropertyChanging();
					this._BaseUnitPrice = value;
					this.SendPropertyChanged("BaseUnitPrice");
					this.OnBaseUnitPriceChanged();
				}
			}
		}
		
		[Column(Storage="_DiscountPercent", DbType="Decimal(18,0) NOT NULL")]
		public decimal DiscountPercent
		{
			get
			{
				return this._DiscountPercent;
			}
			set
			{
				if ((this._DiscountPercent != value))
				{
					this.OnDiscountPercentChanging(value);
					this.SendPropertyChanging();
					this._DiscountPercent = value;
					this.SendPropertyChanged("DiscountPercent");
					this.OnDiscountPercentChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_ShortDescription", DbType="NVarChar(500)")]
		public string ShortDescription
		{
			get
			{
				return this._ShortDescription;
			}
			set
			{
				if ((this._ShortDescription != value))
				{
					this.OnShortDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ShortDescription = value;
					this.SendPropertyChanged("ShortDescription");
					this.OnShortDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Manufacturer", DbType="NVarChar(50)")]
		public string Manufacturer
		{
			get
			{
				return this._Manufacturer;
			}
			set
			{
				if ((this._Manufacturer != value))
				{
					this.OnManufacturerChanging(value);
					this.SendPropertyChanging();
					this._Manufacturer = value;
					this.SendPropertyChanged("Manufacturer");
					this.OnManufacturerChanged();
				}
			}
		}
		
		[Column(Storage="_WeightInPounds", DbType="Money NOT NULL")]
		public decimal WeightInPounds
		{
			get
			{
				return this._WeightInPounds;
			}
			set
			{
				if ((this._WeightInPounds != value))
				{
					this.OnWeightInPoundsChanging(value);
					this.SendPropertyChanging();
					this._WeightInPounds = value;
					this.SendPropertyChanged("WeightInPounds");
					this.OnWeightInPoundsChanged();
				}
			}
		}
		
		[Column(Storage="_InventoryStatusID", DbType="Int NOT NULL")]
		public int InventoryStatusID
		{
			get
			{
				return this._InventoryStatusID;
			}
			set
			{
				if ((this._InventoryStatusID != value))
				{
					if (this._InventoryStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInventoryStatusIDChanging(value);
					this.SendPropertyChanging();
					this._InventoryStatusID = value;
					this.SendPropertyChanged("InventoryStatusID");
					this.OnInventoryStatusIDChanged();
				}
			}
		}
		
		[Column(Storage="_EstimatedDelivery", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string EstimatedDelivery
		{
			get
			{
				return this._EstimatedDelivery;
			}
			set
			{
				if ((this._EstimatedDelivery != value))
				{
					this.OnEstimatedDeliveryChanging(value);
					this.SendPropertyChanging();
					this._EstimatedDelivery = value;
					this.SendPropertyChanged("EstimatedDelivery");
					this.OnEstimatedDeliveryChanged();
				}
			}
		}
		
		[Column(Storage="_AllowBackOrder", DbType="Bit NOT NULL")]
		public bool AllowBackOrder
		{
			get
			{
				return this._AllowBackOrder;
			}
			set
			{
				if ((this._AllowBackOrder != value))
				{
					this.OnAllowBackOrderChanging(value);
					this.SendPropertyChanging();
					this._AllowBackOrder = value;
					this.SendPropertyChanged("AllowBackOrder");
					this.OnAllowBackOrderChanged();
				}
			}
		}
		
		[Column(Storage="_IsTaxable", DbType="Bit NOT NULL")]
		public bool IsTaxable
		{
			get
			{
				return this._IsTaxable;
			}
			set
			{
				if ((this._IsTaxable != value))
				{
					this.OnIsTaxableChanging(value);
					this.SendPropertyChanging();
					this._IsTaxable = value;
					this.SendPropertyChanged("IsTaxable");
					this.OnIsTaxableChanged();
				}
			}
		}
		
		[Association(Name="Product_Categories_Product", Storage="_Categories_Products", ThisKey="ProductID", OtherKey="ProductID")]
		public EntitySet<Categories_Product> Categories_Products
		{
			get
			{
				return this._Categories_Products;
			}
			set
			{
				this._Categories_Products.Assign(value);
			}
		}
		
		[Association(Name="Product_ProductCultureDetail", Storage="_ProductCultureDetails", ThisKey="ProductID", OtherKey="ProductID")]
		public EntitySet<ProductCultureDetail> ProductCultureDetails
		{
			get
			{
				return this._ProductCultureDetails;
			}
			set
			{
				this._ProductCultureDetails.Assign(value);
			}
		}
		
		[Association(Name="Product_ProductReview", Storage="_ProductReviews", ThisKey="ProductID", OtherKey="ProductID")]
		public EntitySet<ProductReview> ProductReviews
		{
			get
			{
				return this._ProductReviews;
			}
			set
			{
				this._ProductReviews.Assign(value);
			}
		}
		
		[Association(Name="Product_ProductImage", Storage="_ProductImages", ThisKey="ProductID", OtherKey="ProductID")]
		public EntitySet<ProductImage> ProductImages
		{
			get
			{
				return this._ProductImages;
			}
			set
			{
				this._ProductImages.Assign(value);
			}
		}
		
		[Association(Name="Product_Products_Related", Storage="_Products_Relateds", ThisKey="ProductID", OtherKey="ProductID")]
		public EntitySet<Products_Related> Products_Relateds
		{
			get
			{
				return this._Products_Relateds;
			}
			set
			{
				this._Products_Relateds.Assign(value);
			}
		}
		
		[Association(Name="Product_Products_Related1", Storage="_Products_Relateds1", ThisKey="ProductID", OtherKey="RelatedProductID")]
		public EntitySet<Products_Related> Products_Relateds1
		{
			get
			{
				return this._Products_Relateds1;
			}
			set
			{
				this._Products_Relateds1.Assign(value);
			}
		}
		
		[Association(Name="Product_InventoryRecord", Storage="_InventoryRecords", ThisKey="ProductID", OtherKey="ProductID")]
		public EntitySet<InventoryRecord> InventoryRecords
		{
			get
			{
				return this._InventoryRecords;
			}
			set
			{
				this._InventoryRecords.Assign(value);
			}
		}
		
		[Association(Name="Product_ProductDescriptor", Storage="_ProductDescriptors", ThisKey="ProductID", OtherKey="ProductID")]
		public EntitySet<ProductDescriptor> ProductDescriptors
		{
			get
			{
				return this._ProductDescriptors;
			}
			set
			{
				this._ProductDescriptors.Assign(value);
			}
		}
		
		[Association(Name="Product_OrderItem", Storage="_OrderItems", ThisKey="ProductID", OtherKey="ProductID")]
		public EntitySet<OrderItem> OrderItems
		{
			get
			{
				return this._OrderItems;
			}
			set
			{
				this._OrderItems.Assign(value);
			}
		}
		
		[Association(Name="DeliveryMethod_Product", Storage="_DeliveryMethod", ThisKey="DeliveryMethodID", OtherKey="DeliveryMethodID", IsForeignKey=true)]
		public DeliveryMethod DeliveryMethod
		{
			get
			{
				return this._DeliveryMethod.Entity;
			}
			set
			{
				DeliveryMethod previousValue = this._DeliveryMethod.Entity;
				if (((previousValue != value) 
							|| (this._DeliveryMethod.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DeliveryMethod.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._DeliveryMethod.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._DeliveryMethodID = value.DeliveryMethodID;
					}
					else
					{
						this._DeliveryMethodID = default(int);
					}
					this.SendPropertyChanged("DeliveryMethod");
				}
			}
		}
		
		[Association(Name="InventoryStatus_Product", Storage="_InventoryStatus", ThisKey="InventoryStatusID", OtherKey="InventoryStatusID", IsForeignKey=true)]
		public InventoryStatus InventoryStatus
		{
			get
			{
				return this._InventoryStatus.Entity;
			}
			set
			{
				InventoryStatus previousValue = this._InventoryStatus.Entity;
				if (((previousValue != value) 
							|| (this._InventoryStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InventoryStatus.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._InventoryStatus.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._InventoryStatusID = value.InventoryStatusID;
					}
					else
					{
						this._InventoryStatusID = default(int);
					}
					this.SendPropertyChanged("InventoryStatus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Categories_Products(Categories_Product entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Categories_Products(Categories_Product entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ProductCultureDetails(ProductCultureDetail entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductCultureDetails(ProductCultureDetail entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ProductReviews(ProductReview entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductReviews(ProductReview entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ProductImages(ProductImage entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductImages(ProductImage entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_Products_Relateds(Products_Related entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Products_Relateds(Products_Related entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_Products_Relateds1(Products_Related entity)
		{
			this.SendPropertyChanging();
			entity.Product1 = this;
		}
		
		private void detach_Products_Relateds1(Products_Related entity)
		{
			this.SendPropertyChanging();
			entity.Product1 = null;
		}
		
		private void attach_InventoryRecords(InventoryRecord entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_InventoryRecords(InventoryRecord entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ProductDescriptors(ProductDescriptor entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductDescriptors(ProductDescriptor entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_OrderItems(OrderItem entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_OrderItems(OrderItem entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[Table(Name="dbo.ProductDescriptors")]
	public partial class ProductDescriptor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DescriptorID;
		
		private int _ProductID;
		
		private string _Title;
		
		private string _Body;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDescriptorIDChanging(int value);
    partial void OnDescriptorIDChanged();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnBodyChanging(string value);
    partial void OnBodyChanged();
    #endregion
		
		public ProductDescriptor()
		{
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[Column(Storage="_DescriptorID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DescriptorID
		{
			get
			{
				return this._DescriptorID;
			}
			set
			{
				if ((this._DescriptorID != value))
				{
					this.OnDescriptorIDChanging(value);
					this.SendPropertyChanging();
					this._DescriptorID = value;
					this.SendPropertyChanged("DescriptorID");
					this.OnDescriptorIDChanged();
				}
			}
		}
		
		[Column(Storage="_ProductID", DbType="Int NOT NULL")]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Body", DbType="NVarChar(2500) NOT NULL", CanBeNull=false)]
		public string Body
		{
			get
			{
				return this._Body;
			}
			set
			{
				if ((this._Body != value))
				{
					this.OnBodyChanging(value);
					this.SendPropertyChanging();
					this._Body = value;
					this.SendPropertyChanged("Body");
					this.OnBodyChanged();
				}
			}
		}
		
		[Association(Name="Product_ProductDescriptor", Storage="_Product", ThisKey="ProductID", OtherKey="ProductID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductDescriptors.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductDescriptors.Add(this);
						this._ProductID = value.ProductID;
					}
					else
					{
						this._ProductID = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Orders")]
	public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _OrderID;
		
		private string _OrderNumber;
		
		private string _UserName;
		
		private string _UserLanguageCode;
		
		private decimal _TaxAmount;
		
		private decimal _ShippingAmount;
		
		private decimal _DiscountAmount;
		
		private string _DiscountReason;
		
		private System.Nullable<System.DateTime> _DateShipped;
		
		private string _TrackingNumber;
		
		private System.Nullable<System.DateTime> _EstimatedDelivery;
		
		private decimal _SubTotal;
		
		private int _OrderStatusID;
		
		private System.DateTime _CreatedOn;
		
		private System.Nullable<System.DateTime> _ExecutedOn;
		
		private System.DateTime _ModifiedOn;
		
		private System.Nullable<int> _BillingAddressID;
		
		private System.Nullable<int> _ShippingAddressID;
		
		private System.Nullable<int> _ShippingMethodID;
		
		private EntitySet<Transactions> _Transactions;
		
		private EntitySet<Orders_Coupon> _Orders_Coupons;
		
		private EntitySet<OrderItem> _OrderItems;
		
		private EntityRef<Address> _Address;
		
		private EntityRef<Address> _Address1;
		
		private EntityRef<OrderStatus> _OrderStatus;
		
		private EntityRef<ShippingMethod> _ShippingMethod;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderIDChanging(System.Guid value);
    partial void OnOrderIDChanged();
    partial void OnOrderNumberChanging(string value);
    partial void OnOrderNumberChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnUserLanguageCodeChanging(string value);
    partial void OnUserLanguageCodeChanged();
    partial void OnTaxAmountChanging(decimal value);
    partial void OnTaxAmountChanged();
    partial void OnShippingAmountChanging(decimal value);
    partial void OnShippingAmountChanged();
    partial void OnDiscountAmountChanging(decimal value);
    partial void OnDiscountAmountChanged();
    partial void OnDiscountReasonChanging(string value);
    partial void OnDiscountReasonChanged();
    partial void OnDateShippedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateShippedChanged();
    partial void OnTrackingNumberChanging(string value);
    partial void OnTrackingNumberChanged();
    partial void OnEstimatedDeliveryChanging(System.Nullable<System.DateTime> value);
    partial void OnEstimatedDeliveryChanged();
    partial void OnSubTotalChanging(decimal value);
    partial void OnSubTotalChanged();
    partial void OnOrderStatusIDChanging(int value);
    partial void OnOrderStatusIDChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnExecutedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnExecutedOnChanged();
    partial void OnModifiedOnChanging(System.DateTime value);
    partial void OnModifiedOnChanged();
    partial void OnBillingAddressIDChanging(System.Nullable<int> value);
    partial void OnBillingAddressIDChanged();
    partial void OnShippingAddressIDChanging(System.Nullable<int> value);
    partial void OnShippingAddressIDChanged();
    partial void OnShippingMethodIDChanging(System.Nullable<int> value);
    partial void OnShippingMethodIDChanged();
    #endregion
		
		public Order()
		{
			this._Transactions = new EntitySet<Transactions>(new Action<Transactions>(this.attach_Transactions), new Action<Transactions>(this.detach_Transactions));
			this._Orders_Coupons = new EntitySet<Orders_Coupon>(new Action<Orders_Coupon>(this.attach_Orders_Coupons), new Action<Orders_Coupon>(this.detach_Orders_Coupons));
			this._OrderItems = new EntitySet<OrderItem>(new Action<OrderItem>(this.attach_OrderItems), new Action<OrderItem>(this.detach_OrderItems));
			this._Address = default(EntityRef<Address>);
			this._Address1 = default(EntityRef<Address>);
			this._OrderStatus = default(EntityRef<OrderStatus>);
			this._ShippingMethod = default(EntityRef<ShippingMethod>);
			OnCreated();
		}
		
		[Column(Storage="_OrderID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrderNumber", DbType="NVarChar(50)")]
		public string OrderNumber
		{
			get
			{
				return this._OrderNumber;
			}
			set
			{
				if ((this._OrderNumber != value))
				{
					this.OnOrderNumberChanging(value);
					this.SendPropertyChanging();
					this._OrderNumber = value;
					this.SendPropertyChanged("OrderNumber");
					this.OnOrderNumberChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_UserLanguageCode", DbType="Char(2) NOT NULL", CanBeNull=false)]
		public string UserLanguageCode
		{
			get
			{
				return this._UserLanguageCode;
			}
			set
			{
				if ((this._UserLanguageCode != value))
				{
					this.OnUserLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._UserLanguageCode = value;
					this.SendPropertyChanged("UserLanguageCode");
					this.OnUserLanguageCodeChanged();
				}
			}
		}
		
		[Column(Storage="_TaxAmount", DbType="Money NOT NULL")]
		public decimal TaxAmount
		{
			get
			{
				return this._TaxAmount;
			}
			set
			{
				if ((this._TaxAmount != value))
				{
					this.OnTaxAmountChanging(value);
					this.SendPropertyChanging();
					this._TaxAmount = value;
					this.SendPropertyChanged("TaxAmount");
					this.OnTaxAmountChanged();
				}
			}
		}
		
		[Column(Storage="_ShippingAmount", DbType="Money NOT NULL")]
		public decimal ShippingAmount
		{
			get
			{
				return this._ShippingAmount;
			}
			set
			{
				if ((this._ShippingAmount != value))
				{
					this.OnShippingAmountChanging(value);
					this.SendPropertyChanging();
					this._ShippingAmount = value;
					this.SendPropertyChanged("ShippingAmount");
					this.OnShippingAmountChanged();
				}
			}
		}
		
		[Column(Storage="_DiscountAmount", DbType="Money NOT NULL")]
		public decimal DiscountAmount
		{
			get
			{
				return this._DiscountAmount;
			}
			set
			{
				if ((this._DiscountAmount != value))
				{
					this.OnDiscountAmountChanging(value);
					this.SendPropertyChanging();
					this._DiscountAmount = value;
					this.SendPropertyChanged("DiscountAmount");
					this.OnDiscountAmountChanged();
				}
			}
		}
		
		[Column(Storage="_DiscountReason", DbType="NVarChar(50)")]
		public string DiscountReason
		{
			get
			{
				return this._DiscountReason;
			}
			set
			{
				if ((this._DiscountReason != value))
				{
					this.OnDiscountReasonChanging(value);
					this.SendPropertyChanging();
					this._DiscountReason = value;
					this.SendPropertyChanged("DiscountReason");
					this.OnDiscountReasonChanged();
				}
			}
		}
		
		[Column(Storage="_DateShipped", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateShipped
		{
			get
			{
				return this._DateShipped;
			}
			set
			{
				if ((this._DateShipped != value))
				{
					this.OnDateShippedChanging(value);
					this.SendPropertyChanging();
					this._DateShipped = value;
					this.SendPropertyChanged("DateShipped");
					this.OnDateShippedChanged();
				}
			}
		}
		
		[Column(Storage="_TrackingNumber", DbType="NVarChar(50)")]
		public string TrackingNumber
		{
			get
			{
				return this._TrackingNumber;
			}
			set
			{
				if ((this._TrackingNumber != value))
				{
					this.OnTrackingNumberChanging(value);
					this.SendPropertyChanging();
					this._TrackingNumber = value;
					this.SendPropertyChanged("TrackingNumber");
					this.OnTrackingNumberChanged();
				}
			}
		}
		
		[Column(Storage="_EstimatedDelivery", DbType="DateTime")]
		public System.Nullable<System.DateTime> EstimatedDelivery
		{
			get
			{
				return this._EstimatedDelivery;
			}
			set
			{
				if ((this._EstimatedDelivery != value))
				{
					this.OnEstimatedDeliveryChanging(value);
					this.SendPropertyChanging();
					this._EstimatedDelivery = value;
					this.SendPropertyChanged("EstimatedDelivery");
					this.OnEstimatedDeliveryChanged();
				}
			}
		}
		
		[Column(Storage="_SubTotal", DbType="Money NOT NULL")]
		public decimal SubTotal
		{
			get
			{
				return this._SubTotal;
			}
			set
			{
				if ((this._SubTotal != value))
				{
					this.OnSubTotalChanging(value);
					this.SendPropertyChanging();
					this._SubTotal = value;
					this.SendPropertyChanged("SubTotal");
					this.OnSubTotalChanged();
				}
			}
		}
		
		[Column(Storage="_OrderStatusID", DbType="Int NOT NULL")]
		public int OrderStatusID
		{
			get
			{
				return this._OrderStatusID;
			}
			set
			{
				if ((this._OrderStatusID != value))
				{
					if (this._OrderStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderStatusIDChanging(value);
					this.SendPropertyChanging();
					this._OrderStatusID = value;
					this.SendPropertyChanged("OrderStatusID");
					this.OnOrderStatusIDChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[Column(Storage="_ExecutedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> ExecutedOn
		{
			get
			{
				return this._ExecutedOn;
			}
			set
			{
				if ((this._ExecutedOn != value))
				{
					this.OnExecutedOnChanging(value);
					this.SendPropertyChanging();
					this._ExecutedOn = value;
					this.SendPropertyChanged("ExecutedOn");
					this.OnExecutedOnChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedOn", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedOn
		{
			get
			{
				return this._ModifiedOn;
			}
			set
			{
				if ((this._ModifiedOn != value))
				{
					this.OnModifiedOnChanging(value);
					this.SendPropertyChanging();
					this._ModifiedOn = value;
					this.SendPropertyChanged("ModifiedOn");
					this.OnModifiedOnChanged();
				}
			}
		}
		
		[Column(Storage="_BillingAddressID", DbType="Int")]
		public System.Nullable<int> BillingAddressID
		{
			get
			{
				return this._BillingAddressID;
			}
			set
			{
				if ((this._BillingAddressID != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBillingAddressIDChanging(value);
					this.SendPropertyChanging();
					this._BillingAddressID = value;
					this.SendPropertyChanged("BillingAddressID");
					this.OnBillingAddressIDChanged();
				}
			}
		}
		
		[Column(Storage="_ShippingAddressID", DbType="Int")]
		public System.Nullable<int> ShippingAddressID
		{
			get
			{
				return this._ShippingAddressID;
			}
			set
			{
				if ((this._ShippingAddressID != value))
				{
					if (this._Address1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShippingAddressIDChanging(value);
					this.SendPropertyChanging();
					this._ShippingAddressID = value;
					this.SendPropertyChanged("ShippingAddressID");
					this.OnShippingAddressIDChanged();
				}
			}
		}
		
		[Column(Storage="_ShippingMethodID", DbType="Int")]
		public System.Nullable<int> ShippingMethodID
		{
			get
			{
				return this._ShippingMethodID;
			}
			set
			{
				if ((this._ShippingMethodID != value))
				{
					if (this._ShippingMethod.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShippingMethodIDChanging(value);
					this.SendPropertyChanging();
					this._ShippingMethodID = value;
					this.SendPropertyChanged("ShippingMethodID");
					this.OnShippingMethodIDChanged();
				}
			}
		}
		
		[Association(Name="Order_Transactions", Storage="_Transactions", ThisKey="OrderID", OtherKey="OrderID")]
		public EntitySet<Transactions> Transactions
		{
			get
			{
				return this._Transactions;
			}
			set
			{
				this._Transactions.Assign(value);
			}
		}
		
		[Association(Name="Order_Orders_Coupon", Storage="_Orders_Coupons", ThisKey="OrderID", OtherKey="OrderID")]
		public EntitySet<Orders_Coupon> Orders_Coupons
		{
			get
			{
				return this._Orders_Coupons;
			}
			set
			{
				this._Orders_Coupons.Assign(value);
			}
		}
		
		[Association(Name="Order_OrderItem", Storage="_OrderItems", ThisKey="OrderID", OtherKey="OrderID")]
		public EntitySet<OrderItem> OrderItems
		{
			get
			{
				return this._OrderItems;
			}
			set
			{
				this._OrderItems.Assign(value);
			}
		}
		
		[Association(Name="Address_Order", Storage="_Address", ThisKey="BillingAddressID", OtherKey="AddressID", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._BillingAddressID = value.AddressID;
					}
					else
					{
						this._BillingAddressID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		[Association(Name="Address_Order1", Storage="_Address1", ThisKey="ShippingAddressID", OtherKey="AddressID", IsForeignKey=true)]
		public Address Address1
		{
			get
			{
				return this._Address1.Entity;
			}
			set
			{
				Address previousValue = this._Address1.Entity;
				if (((previousValue != value) 
							|| (this._Address1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address1.Entity = null;
						previousValue.Orders1.Remove(this);
					}
					this._Address1.Entity = value;
					if ((value != null))
					{
						value.Orders1.Add(this);
						this._ShippingAddressID = value.AddressID;
					}
					else
					{
						this._ShippingAddressID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Address1");
				}
			}
		}
		
		[Association(Name="OrderStatus_Order", Storage="_OrderStatus", ThisKey="OrderStatusID", OtherKey="OrderStatusID", IsForeignKey=true)]
		public OrderStatus OrderStatus
		{
			get
			{
				return this._OrderStatus.Entity;
			}
			set
			{
				OrderStatus previousValue = this._OrderStatus.Entity;
				if (((previousValue != value) 
							|| (this._OrderStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderStatus.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._OrderStatus.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._OrderStatusID = value.OrderStatusID;
					}
					else
					{
						this._OrderStatusID = default(int);
					}
					this.SendPropertyChanged("OrderStatus");
				}
			}
		}
		
		[Association(Name="ShippingMethod_Order", Storage="_ShippingMethod", ThisKey="ShippingMethodID", OtherKey="ShippingMethodID", IsForeignKey=true)]
		public ShippingMethod ShippingMethod
		{
			get
			{
				return this._ShippingMethod.Entity;
			}
			set
			{
				ShippingMethod previousValue = this._ShippingMethod.Entity;
				if (((previousValue != value) 
							|| (this._ShippingMethod.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ShippingMethod.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._ShippingMethod.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._ShippingMethodID = value.ShippingMethodID;
					}
					else
					{
						this._ShippingMethodID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ShippingMethod");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Transactions(Transactions entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_Transactions(Transactions entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
		
		private void attach_Orders_Coupons(Orders_Coupon entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_Orders_Coupons(Orders_Coupon entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
		
		private void attach_OrderItems(OrderItem entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_OrderItems(OrderItem entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
	}
	
	[Table(Name="dbo.CouponType")]
	public partial class CouponType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CouponTypeID;
		
		private string _Description;
		
		private EntitySet<Coupon> _Coupons;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCouponTypeIDChanging(int value);
    partial void OnCouponTypeIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public CouponType()
		{
			this._Coupons = new EntitySet<Coupon>(new Action<Coupon>(this.attach_Coupons), new Action<Coupon>(this.detach_Coupons));
			OnCreated();
		}
		
		[Column(Storage="_CouponTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CouponTypeID
		{
			get
			{
				return this._CouponTypeID;
			}
			set
			{
				if ((this._CouponTypeID != value))
				{
					this.OnCouponTypeIDChanging(value);
					this.SendPropertyChanging();
					this._CouponTypeID = value;
					this.SendPropertyChanged("CouponTypeID");
					this.OnCouponTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="CouponType_Coupon", Storage="_Coupons", ThisKey="CouponTypeID", OtherKey="CouponTypeID")]
		public EntitySet<Coupon> Coupons
		{
			get
			{
				return this._Coupons;
			}
			set
			{
				this._Coupons.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Coupons(Coupon entity)
		{
			this.SendPropertyChanging();
			entity.CouponType = this;
		}
		
		private void detach_Coupons(Coupon entity)
		{
			this.SendPropertyChanging();
			entity.CouponType = null;
		}
	}
	
	[Table(Name="dbo.Orders_Coupons")]
	public partial class Orders_Coupon : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _OrderID;
		
		private int _CouponID;
		
		private EntityRef<Order> _Order;
		
		private EntityRef<Coupon> _Coupon;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderIDChanging(System.Guid value);
    partial void OnOrderIDChanged();
    partial void OnCouponIDChanging(int value);
    partial void OnCouponIDChanged();
    #endregion
		
		public Orders_Coupon()
		{
			this._Order = default(EntityRef<Order>);
			this._Coupon = default(EntityRef<Coupon>);
			OnCreated();
		}
		
		[Column(Storage="_OrderID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[Column(Storage="_CouponID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CouponID
		{
			get
			{
				return this._CouponID;
			}
			set
			{
				if ((this._CouponID != value))
				{
					if (this._Coupon.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCouponIDChanging(value);
					this.SendPropertyChanging();
					this._CouponID = value;
					this.SendPropertyChanged("CouponID");
					this.OnCouponIDChanged();
				}
			}
		}
		
		[Association(Name="Order_Orders_Coupon", Storage="_Order", ThisKey="OrderID", OtherKey="OrderID", IsForeignKey=true)]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.Orders_Coupons.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.Orders_Coupons.Add(this);
						this._OrderID = value.OrderID;
					}
					else
					{
						this._OrderID = default(System.Guid);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		[Association(Name="Coupon_Orders_Coupon", Storage="_Coupon", ThisKey="CouponID", OtherKey="CouponID", IsForeignKey=true)]
		public Coupon Coupon
		{
			get
			{
				return this._Coupon.Entity;
			}
			set
			{
				Coupon previousValue = this._Coupon.Entity;
				if (((previousValue != value) 
							|| (this._Coupon.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Coupon.Entity = null;
						previousValue.Orders_Coupons.Remove(this);
					}
					this._Coupon.Entity = value;
					if ((value != null))
					{
						value.Orders_Coupons.Add(this);
						this._CouponID = value.CouponID;
					}
					else
					{
						this._CouponID = default(int);
					}
					this.SendPropertyChanged("Coupon");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Coupons")]
	public partial class Coupon : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CouponID;
		
		private System.Nullable<int> _CouponTypeID;
		
		private string _Code;
		
		private decimal _MinimumPurchase;
		
		private int _MinimumItems;
		
		private string _MustIncludeProductCodes;
		
		private string _AppliesToProductCodes;
		
		private System.DateTime _ExpiresOn;
		
		private decimal _PercentOff;
		
		private decimal _AmountOff;
		
		private EntitySet<Orders_Coupon> _Orders_Coupons;
		
		private EntityRef<CouponType> _CouponType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCouponIDChanging(int value);
    partial void OnCouponIDChanged();
    partial void OnCouponTypeIDChanging(System.Nullable<int> value);
    partial void OnCouponTypeIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnMinimumPurchaseChanging(decimal value);
    partial void OnMinimumPurchaseChanged();
    partial void OnMinimumItemsChanging(int value);
    partial void OnMinimumItemsChanged();
    partial void OnMustIncludeProductCodesChanging(string value);
    partial void OnMustIncludeProductCodesChanged();
    partial void OnAppliesToProductCodesChanging(string value);
    partial void OnAppliesToProductCodesChanged();
    partial void OnExpiresOnChanging(System.DateTime value);
    partial void OnExpiresOnChanged();
    partial void OnPercentOffChanging(decimal value);
    partial void OnPercentOffChanged();
    partial void OnAmountOffChanging(decimal value);
    partial void OnAmountOffChanged();
    #endregion
		
		public Coupon()
		{
			this._Orders_Coupons = new EntitySet<Orders_Coupon>(new Action<Orders_Coupon>(this.attach_Orders_Coupons), new Action<Orders_Coupon>(this.detach_Orders_Coupons));
			this._CouponType = default(EntityRef<CouponType>);
			OnCreated();
		}
		
		[Column(Storage="_CouponID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CouponID
		{
			get
			{
				return this._CouponID;
			}
			set
			{
				if ((this._CouponID != value))
				{
					this.OnCouponIDChanging(value);
					this.SendPropertyChanging();
					this._CouponID = value;
					this.SendPropertyChanged("CouponID");
					this.OnCouponIDChanged();
				}
			}
		}
		
		[Column(Storage="_CouponTypeID", DbType="Int")]
		public System.Nullable<int> CouponTypeID
		{
			get
			{
				return this._CouponTypeID;
			}
			set
			{
				if ((this._CouponTypeID != value))
				{
					if (this._CouponType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCouponTypeIDChanging(value);
					this.SendPropertyChanging();
					this._CouponTypeID = value;
					this.SendPropertyChanged("CouponTypeID");
					this.OnCouponTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Code", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Storage="_MinimumPurchase", DbType="Money NOT NULL")]
		public decimal MinimumPurchase
		{
			get
			{
				return this._MinimumPurchase;
			}
			set
			{
				if ((this._MinimumPurchase != value))
				{
					this.OnMinimumPurchaseChanging(value);
					this.SendPropertyChanging();
					this._MinimumPurchase = value;
					this.SendPropertyChanged("MinimumPurchase");
					this.OnMinimumPurchaseChanged();
				}
			}
		}
		
		[Column(Storage="_MinimumItems", DbType="Int NOT NULL")]
		public int MinimumItems
		{
			get
			{
				return this._MinimumItems;
			}
			set
			{
				if ((this._MinimumItems != value))
				{
					this.OnMinimumItemsChanging(value);
					this.SendPropertyChanging();
					this._MinimumItems = value;
					this.SendPropertyChanged("MinimumItems");
					this.OnMinimumItemsChanged();
				}
			}
		}
		
		[Column(Storage="_MustIncludeProductCodes", DbType="NVarChar(2500)")]
		public string MustIncludeProductCodes
		{
			get
			{
				return this._MustIncludeProductCodes;
			}
			set
			{
				if ((this._MustIncludeProductCodes != value))
				{
					this.OnMustIncludeProductCodesChanging(value);
					this.SendPropertyChanging();
					this._MustIncludeProductCodes = value;
					this.SendPropertyChanged("MustIncludeProductCodes");
					this.OnMustIncludeProductCodesChanged();
				}
			}
		}
		
		[Column(Storage="_AppliesToProductCodes", DbType="NVarChar(2500)")]
		public string AppliesToProductCodes
		{
			get
			{
				return this._AppliesToProductCodes;
			}
			set
			{
				if ((this._AppliesToProductCodes != value))
				{
					this.OnAppliesToProductCodesChanging(value);
					this.SendPropertyChanging();
					this._AppliesToProductCodes = value;
					this.SendPropertyChanged("AppliesToProductCodes");
					this.OnAppliesToProductCodesChanged();
				}
			}
		}
		
		[Column(Storage="_ExpiresOn", DbType="DateTime NOT NULL")]
		public System.DateTime ExpiresOn
		{
			get
			{
				return this._ExpiresOn;
			}
			set
			{
				if ((this._ExpiresOn != value))
				{
					this.OnExpiresOnChanging(value);
					this.SendPropertyChanging();
					this._ExpiresOn = value;
					this.SendPropertyChanged("ExpiresOn");
					this.OnExpiresOnChanged();
				}
			}
		}
		
		[Column(Storage="_PercentOff", DbType="Decimal(18,0) NOT NULL")]
		public decimal PercentOff
		{
			get
			{
				return this._PercentOff;
			}
			set
			{
				if ((this._PercentOff != value))
				{
					this.OnPercentOffChanging(value);
					this.SendPropertyChanging();
					this._PercentOff = value;
					this.SendPropertyChanged("PercentOff");
					this.OnPercentOffChanged();
				}
			}
		}
		
		[Column(Storage="_AmountOff", DbType="Money NOT NULL")]
		public decimal AmountOff
		{
			get
			{
				return this._AmountOff;
			}
			set
			{
				if ((this._AmountOff != value))
				{
					this.OnAmountOffChanging(value);
					this.SendPropertyChanging();
					this._AmountOff = value;
					this.SendPropertyChanged("AmountOff");
					this.OnAmountOffChanged();
				}
			}
		}
		
		[Association(Name="Coupon_Orders_Coupon", Storage="_Orders_Coupons", ThisKey="CouponID", OtherKey="CouponID")]
		public EntitySet<Orders_Coupon> Orders_Coupons
		{
			get
			{
				return this._Orders_Coupons;
			}
			set
			{
				this._Orders_Coupons.Assign(value);
			}
		}
		
		[Association(Name="CouponType_Coupon", Storage="_CouponType", ThisKey="CouponTypeID", OtherKey="CouponTypeID", IsForeignKey=true)]
		public CouponType CouponType
		{
			get
			{
				return this._CouponType.Entity;
			}
			set
			{
				CouponType previousValue = this._CouponType.Entity;
				if (((previousValue != value) 
							|| (this._CouponType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CouponType.Entity = null;
						previousValue.Coupons.Remove(this);
					}
					this._CouponType.Entity = value;
					if ((value != null))
					{
						value.Coupons.Add(this);
						this._CouponTypeID = value.CouponTypeID;
					}
					else
					{
						this._CouponTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CouponType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders_Coupons(Orders_Coupon entity)
		{
			this.SendPropertyChanging();
			entity.Coupon = this;
		}
		
		private void detach_Orders_Coupons(Orders_Coupon entity)
		{
			this.SendPropertyChanging();
			entity.Coupon = null;
		}
	}
	
	[Table(Name="dbo.OrderItems")]
	public partial class OrderItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _OrderID;
		
		private int _ProductID;
		
		private int _Quantity;
		
		private System.DateTime _DateAdded;
		
		private decimal _LineItemPrice;
		
		private EntityRef<Order> _Order;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderIDChanging(System.Guid value);
    partial void OnOrderIDChanged();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    partial void OnLineItemPriceChanging(decimal value);
    partial void OnLineItemPriceChanged();
    #endregion
		
		public OrderItem()
		{
			this._Order = default(EntityRef<Order>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[Column(Storage="_OrderID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[Column(Storage="_ProductID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[Column(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[Column(Storage="_LineItemPrice", DbType="Money NOT NULL")]
		public decimal LineItemPrice
		{
			get
			{
				return this._LineItemPrice;
			}
			set
			{
				if ((this._LineItemPrice != value))
				{
					this.OnLineItemPriceChanging(value);
					this.SendPropertyChanging();
					this._LineItemPrice = value;
					this.SendPropertyChanged("LineItemPrice");
					this.OnLineItemPriceChanged();
				}
			}
		}
		
		[Association(Name="Order_OrderItem", Storage="_Order", ThisKey="OrderID", OtherKey="OrderID", IsForeignKey=true)]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.OrderItems.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.OrderItems.Add(this);
						this._OrderID = value.OrderID;
					}
					else
					{
						this._OrderID = default(System.Guid);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		[Association(Name="Product_OrderItem", Storage="_Product", ThisKey="ProductID", OtherKey="ProductID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.OrderItems.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.OrderItems.Add(this);
						this._ProductID = value.ProductID;
					}
					else
					{
						this._ProductID = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
